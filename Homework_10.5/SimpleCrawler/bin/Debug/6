<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="never" />
    <meta name="description" content="爱生活，爱编码，本文已收录架构技术专栏关注这个喜欢分享的地方。本文 架构技术专栏 已收录，有各种JVM、多线程、源码视频、资料以及技术文章等你来拿 零、开局 前两天我搞了两个每日一个知识点，对多线程并" />
    <meta property="og:description" content="爱生活，爱编码，本文已收录架构技术专栏关注这个喜欢分享的地方。本文 架构技术专栏 已收录，有各种JVM、多线程、源码视频、资料以及技术文章等你来拿 零、开局 前两天我搞了两个每日一个知识点，对多线程并" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>看懂这篇，才能说了解并发底层技术 - 架构技术专栏 - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=kXxbcm7tkkASG2_xwyD6Kw4CzHe0bT3mi0jyCb8YspQ" />
    <link id="MainCss" rel="stylesheet" href="/skins/bluesky/bundle-bluesky.min.css?v=66dDisik3fcPwRHzge6OPz5XXEtQYoHeZwqfADmMifQ" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/bluesky/bundle-bluesky-mobile.min.css?v=w2Rgaiz5pwMvQiaI018cDsOEsicdDhpRf-p561XUG6Q" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/jiagoujishu/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/jiagoujishu/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/jiagoujishu/wlwmanifest.xml" />
    <script>
        var currentBlogId = 631818;
        var currentBlogApp = 'jiagoujishu';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'BlueSky';
        var visitorUserId = '';
    </script>
        <script>
            var currentPostDateAdded = '2020-10-11 09:27';
        </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=fLUEwRea4WeqlJe_CLnNunLQZl_ViJFLgKpcNDuKptI"></script>
    
    
    
</head>
<body>
    <a name="top"></a>
    <div id="top_nav" class="navbar">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding">
                    <a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a>
                </li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=oS4PkibyMjZ9rGD5XAcLt99uW_s76Javy2up4dbnZNY" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" onclick="logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signin/?returnUrl=https://www.cnblogs.com/">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/jiagoujishu/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/jiagoujishu/">架构技术专栏</a>
</h1>
<h2>
文章每周持续更新，可以微信搜索「架构技术专栏 」第一时间阅读 本文已收录 http://47.104.79.116:4321/ 关注公众号可获取大量的学习视频
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/jiagoujishu/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E6%9E%B6%E6%9E%84%E6%8A%80%E6%9C%AF%E4%B8%93%E6%A0%8F">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/jiagoujishu/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
11&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
3</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/jiagoujishu/p/13799459.html">
    <span>看懂这篇，才能说了解并发底层技术</span>
    


</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <blockquote>
<p>爱生活，爱编码，本文已收录<a href="http://www.jiagoujishu.com/">架构技术专栏</a>关注这个喜欢分享的地方。本文 架构技术专栏 已收录，有各种JVM、多线程、源码视频、资料以及技术文章等你来拿</p>
</blockquote>
<h2 id="零、开局">零、开局</h2>
<p>前两天我搞了两个每日一个知识点，对多线程并发的部分知识做了下概括性的总结。但通过小伙伴的反馈是，那玩意写的比较抽象，看的云里雾里晕晕乎乎的。</p>
<p>所以又针对多线程底层这一块再重新做下系统性的讲解。<br>
有兴趣的朋友可以先看下前两节，可以说是个笼统的概念版。</p>
<p>好了，回归正题。在多线程并发的世界里synchronized、volatile、JMM是我们绕不过去的技术坎，而重排序、可见性、内存屏障又有时候搞得你一脸懵逼。有道是知其然知其所以然，了解了底层的原理性问题，不论是日常写BUG还是面试都是必备神器了。</p>
<p><strong>先看几个问题点：</strong></p>
<p>1、处理器与内存之间是怎么交互的？</p>
<p>2、什么是缓存一致性协议？</p>
<p>3、高速缓存内的消息是怎么更新变化的？</p>
<p>4、内存屏障又和他们有什么关系？</p>
<p>如果上面的问题你都能倒背如流，那就去看看电影放松下吧！</p>
<h2 id="一、高速缓存">一、高速缓存</h2>
<p>目前的处理器的处理能力要远远的胜于主内存（DRAM）访问的效率，往往主内存执行一次读写操作所需的时间足够处理器执行上百次指令。所以为了填补处理器与主内存之间的差距，设计者们在主内存和处理器直接引入了高速缓存（Cache）。如图：</p>
<p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2af02b3cfd3b45209f2dacdc0a703f67~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></p>
<p>其实在现代处理器中，会有多级高速缓存。一般我们会成为一级缓存（L1 Cache）、二级缓存（L2 Cache）、三级缓存（L3 Cache）等，其中一级缓存一般会被集成在CPU内核中。如图：</p>
<p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4e7942d5d05a405d83ea1e815309538f~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></p>
<h4 id="内部结构">内部结构</h4>
<p>高速缓存存在于每个处理器内，处理器在执行读、写操作的时候并不需要直接与内存交互，而是通过高速缓存进行。</p>
<p>高速缓存内其实就是为应用程序访问的变量保存了一个数据副本。高速缓存相当于一个容量极小的散列表（Hash Table），其键是一个内存地址，值是内存数据的副本或是我们准备写入的数据。从其内部来看，其实相当于一个拉链散列表，也就是包含了很多桶，每个桶上又可以包含很多缓存条目（想想HashMap），如图：</p>
<p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7800b92668f942dba7a868c4c9efdad3~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></p>
<h4 id="缓存条目">缓存条目</h4>
<p>在每个缓存条目中，其实又包含了Tag、Data Block、Flag三个部分，咱们来个小图：</p>
<p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8bcf8d9656a84815bd7d2bc546c8972c~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></p>
<ul>
<li>
<p>**Data Block : **也就是我们常常叨叨的缓存行（Cache Line）,她其实是高速缓存与主内存间进行数据交互的最小单元，里面存储着我们需要的变量数据。</p>
</li>
<li>
<p>**Tag : **包含了缓存行中数据内存地址的信息（其实是内存地址的高位部分的比特）</p>
</li>
<li>
<p><strong>Flag :</strong> 标识了当前缓存行的状态（MESI咯）</p>
</li>
</ul>
<p><strong>那么，我们的处理器又是怎么寻找到我们需要的变量呢？</strong></p>
<p>不多说，上图：</p>
<p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9ccf0ded4a344416a4ae7f918d492efd~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></p>
<p>其实，在处理器执行内存访问变量的操作时，会对内存地址进行解码的(由高速缓存控制器执行)。而解码后就会得到tag、index 、offset三部分数据。</p>
<p><strong>index :</strong> 我们知道高速缓存内的结构是一个拉链散列表，所以index就是为了帮我们来定位到底是哪个缓存条目的。</p>
<p><strong>tag :</strong> 很明显和我们缓存条目中的Tag 一样，所以tag 相当于缓存条目的编号。主要用于，在同一个桶下的拉链中来寻找我们的目标。</p>
<p><strong>offset :</strong> 我们要知道一个前提，就是一个缓存条目中的缓存行是可以存储很多变量的，所以offset的作用是用来确定一个变量在缓存行中的起始位置。</p>
<p>所以，在如果在高速缓存内能找到缓存条目并且定位到了响应得缓存行，而此时缓存条目的Flag标识为有效状态，这时候也就是我们所说的缓存命中（Cache Hit）,否则就是缓存未命中（Cache Miss）。</p>
<p>缓存未命有包括读未命中（Read Miss）和写未命中(Write Miss)两种,对应着对内存的读写操作。</p>
<p><strong>而在读未命中（Read Miss）</strong> 产生时，处理器所需要的数据会从主内存加载并被存入高速缓存对应的缓存行中，此过程会导致处理器停顿（Stall）而不能执行其他指令。</p>
<h2 id="二、缓存一致性协议">二、缓存一致性协议</h2>
<p>在多线程进行共享变量访问时，因为各个线程执行的处理器上的高速缓存中都会保存一份变量的副本数据，这样就会有一个问题，那当一个副本更新后怎么保证其它处理器能马上的获取到最新的数据。这其实就是缓存一致性的问题，其本质也就是怎么防止数据的脏读。</p>
<p>为了解决这个问题，处理器间出现了一种通信机制，也就是缓存一致性协议（Cache Coherence Protocol）。</p>
<h4 id="mesi是什么">MESI是什么</h4>
<p>缓存一致性协议有很多种，MESI（Modified-Exclusive-Shared-Invalid）协议其实是目前使用很广泛的缓存一致性协议，x86处理器所使用的缓存一致性协议就是基于MESI的。</p>
<p>我们可以把MESI对内存数据访问理解成我们常用的读写锁，它可以使对同一内存地址的读操作是并发的，而写操作是独占的。所以在任何时刻写操作只能有一个处理器执行。而在MESI中，一个处理器要向内存写数据时必须持有该数据的所有权。</p>
<p>MESI将缓存条目的状态分为了Modified、Exclusive、Shared、Invalid四种，并在此基础上定义了一组消息用于处理器的读、写内存操作。如图：</p>
<p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0d7247e3fb364e9c9ae33ec7c453d60e~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></p>
<h4 id="mesi的四种状态">MESI的四种状态</h4>
<p>所以MESI其实就是使用四种状态来标识了缓存条目当前的状态，来保证了高速缓存内数据一致性的问题。那我们来仔细的看下四种状态</p>
<p><strong>Modified ：</strong></p>
<p>表示高速缓存中相应的缓存行内的数据已经被更新了。由于MESI协议中任意时刻只能有一个处理器对同一内存地址对应的数据进行更新，也就是说再多个处理器的高速缓存中相同Tag值得缓存条目只能有一个处于Modified状态。处于此状态的缓存条目中缓存行内的数据与主内存包含的数据不一致。</p>
<p><strong>Exclusive：</strong></p>
<p>表示高速缓存相应的缓存行内的数据副本与主内存中的数据一样。并且，该缓存行以独占的方式保留了相应主内存地址的数据副本，此时其他处理上高速缓存当前都不保留该数据的有效副本。</p>
<p><strong>Shared：</strong></p>
<p>表示当前高速缓存相应缓存行包含相应主内存地址对应的数据副本，且与主内存中的数据是一致的。如果缓存条目状态是Shared的，那么其他处理器上如果也存在相同Tag的缓存条目，那这些缓存条目状态肯定也是Shared。</p>
<p><strong>Invalid：</strong></p>
<p>表示该缓存行中不包含任何主内存中的有效数据副本，这个状态也是缓存条目的初始状态。</p>
<h4 id="mesi处理机制">MESI处理机制</h4>
<p>前面说了那么多，都是MESI的基础理论，那么，MESI协议到底是怎么来协调处理器进行内存的读写呢？</p>
<p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/48c8b1e43a984cdb855f7024f4f4b376~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></p>
<p>其实，想协调处理必然需要先和各个处理器进行通信。所以MESI协议定义了一组消息机制用于协调各个处理器的读写操作。</p>
<p>我们可以参考HTTP协议来进行理解，可以将MESI协议中的消息分为请求和响应两类。处理器在进行主内存读写的时候会往总线（Bus）中发请求消息，同时每个处理器还会嗅探（Snoop）总线中由其他处理器发出的请求消息并在一定条件下往总线中回复响应得响应消息。</p>
<p>针对于消息的类型，有如下几种：</p>
<ul>
<li>
<p><strong>Read :</strong> 请求消息，用于通知其他处理器、主内存，当前处理器准备读取某个数据。该消息内包含待读取数据的主内存地址。</p>
</li>
<li>
<p><strong>Read Response:</strong> 响应消息，该消息内包含了被请求读取的数据。该消息可能是主内存返回的，也可能是其他高速缓存嗅探到Read 消息返回的。</p>
</li>
<li>
<p><strong>Invalidate：</strong> 请求消息，通知其他处理器删除指定内存地址的数据副本。其实就是告诉他们你这个缓存条目内的数据无效了，删除只是逻辑上的，其实就是更新下缓存条目的Flag.</p>
</li>
<li>
<p><strong>Invalidate Acknowledge：</strong> 响应消息，接收到Invalidate消息的处理器必须回复此消息，表示已经删除了其高速缓存内对应的数据副本。</p>
</li>
<li>
<p><strong>Read Invalidate:</strong> 请求消息，此消息为Read 和 Invalidate消息组成的复合消息，作用主要是用于通知其他处理器当前处理器准备更新一个数据了，并请求其他处理器删除其高速缓存内对应的数据副本。接收到该消息的处理器必须回复Read Response 和 Invalidate Acknowledge消息。</p>
</li>
<li>
<p><strong>Writeback:</strong> 请求消息，消息包含了需要写入主内存的数据和其对应的内存地址。</p>
</li>
</ul>
<p><strong>了解完了基础的消息类型，那么我们就来看看MESI协议是如何协助处理器实现内存读写的，看图说话：</strong></p>
<p>举例：假如内存地址0xxx上的变量s 是CPU1 和CPU2共享的<strong>我们先来说下CPU上读取数据s</strong></p>
<p><strong>高速缓存内存在有效数据时：</strong></p>
<p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7184d811cc5e434cad27fd29456d6832~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></p>
<p>CPU1会根据内存地址0xxx在高速缓存找到对应的缓存条目，并读取缓存条目的Tag和Flag值。如果此时缓存条目的Flag 是M、E、S三种状态的任何一种，那么就直接从缓存行中读取地址0xxx对应的数据，不会向总线中发送任何消息。</p>
<p><strong>高速缓存内不存在有效数据时：</strong></p>
<p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eb26af3217d6486387768c57c94e6397~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></p>
<p>1、如CPU2 高速缓存内找到的缓存条目状态为I时，则说明此时CPU2的高速缓存中不包含数据s的有效数据副本。</p>
<p>2、CPU2向总线发送Read消息来读取地址0xxx对应的数据s.</p>
<p>3、CPU1（或主内存）嗅探到Read消息，则需要回复Read Response提供相应的数据。</p>
<p>4、CPU2接收到Read Response消息时，会将其中携带的数据s存入相应的缓存行并将对应的缓存条目状态更新为S。</p>
<p><strong>从宏观的角度看，就是上面的流程了，我们再继续深入下，看看在缓存条目为I的时候到底是怎么进行消息处理的</strong></p>
<p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cba32c1b6fd74c96abcf449b0742fd0b~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></p>
<p><strong>说完了读取数据，我们就在说下CPU1是怎么写入一个地址为0xxx的数据s的</strong></p>
<p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3779ea67419b447689e9f7d75fa132dc~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></p>
<p>MESI协议解决了缓存一致性的问题，但其中有一个问题，那就是需要在等待其他处理器全部回复后才能进行下一步操作，这种等待明显是不能接受的，下面就继续来看看大神们是怎么解决处理器等待的问题的。</p>
<h2 id="三、写缓冲和无效化队列">三、写缓冲和无效化队列</h2>
<p>因为MESI自身有个问题，就是在写内存操作的时候必须等待其他所有处理器将自身高速缓存内的相应数据副本都删除后，并接收到这些处理器回复的Invalidate Acknowledge/Read Response消息后才能将数据写入高速缓存。</p>
<p>为了避免这种等待造成的写操作延迟，硬件设计引入了写缓冲器和无效化队列。</p>
<h4 id="写缓冲器（store-buffer）">写缓冲器（Store Buffer）</h4>
<p>在每个处理器内都有自己独立的写缓冲器，写缓冲器内部包含很多条目（Entry）,写缓冲器比高速缓存还要小点。</p>
<p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/43a273bc8fa5454d8a0311f192cc41de~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></p>
<p><strong>那么，在引入了写缓冲器后，处理器在执行写入数据的时候会做什么处理呢？还会直接发送消息到BUS吗？</strong></p>
<p>我们来看几个场景：</p>
<p>（注意x86处理器是不管相应的缓存条目是什么状态，都会直接将每一个写操作结果存入写缓冲器）</p>
<p><strong>1、如果此时缓存条目状态是E或者M：</strong></p>
<p>代表此时处理器已经获取到数据所有权，那么就会将数据直接写入相应的缓存行内，而不会向总线发送消息。</p>
<p><strong>2、如果此时缓存条目状态是S</strong></p>
<ul>
<li>
<p>此时处理器会将写操作的数据存入写缓冲器的条目中，并发送Invalidate消息。</p>
</li>
<li>
<p>如果此时相应缓存条目的状态是I ，那就称之为写操作遇到了写未命中（Write Miss），此时就会将数据先写入写缓冲器的条目中，然后在发送Read Invalidate来通知其他处理器我要进行数据更新了。</p>
</li>
<li>
<p>处理器的写操作其实在将数据写入缓冲器时就完成了，处理器并不需要等待其他处理器返回Invalidate Acknowledge/Read Response消息</p>
</li>
<li>
<p>当处理器接收到其他处理器回复的针对于同一个缓存条目的Invalidate Acknowledge消息时，就会将写缓冲内对应的数据写入相应的缓存行中</p>
</li>
</ul>
<p>通过上面的场景描述我们可以看出，写缓冲器帮助处理器实现了异步写数据的能力，使得处理器处理指令的能力大大提升。</p>
<h4 id="无效化队列（invalidate-queue）">无效化队列（Invalidate Queue）</h4>
<p>其实在处理器接到Invalidate类型的消息时，并不会删除消息中指定地址对应的数据副本（也就是说不会去马上修改缓存条目的状态为I），而是将消息存入无效化队列之后就回复Invalidate Acknowledge消息了，主要原因还是为了减少处理器等待的时间。</p>
<p>所以不管是写缓冲器还是无效化队列，其实都是为了减少处理器的等待时间，采用了空间换时间的方式来实现命令的异步处理。</p>
<p><strong>总之就是，写缓冲器解决了写数据时要等待其他处理器响应得问题，无效化队列帮助解决了删除数据等待的问题。</strong></p>
<p><strong>但既然是异步的，那必然又会带来新的问题 -- 内存重排序和可见性问题。</strong></p>
<p>所以，我们继续接着聊。</p>
<h4 id="存储转发（store-fowarding）">存储转发（Store Fowarding）</h4>
<p>通过上面内容我们知道了有了写缓冲器后，处理器在写数据时直接写入缓冲器就直接返回了。</p>
<p>那么问题就来了，当我们写完一个数据又要马上进行读取可咋办呢？话不多说，咱们还是举个例子来说，如图：</p>
<p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4a4ff93949e8409383450b55cc4a6811~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></p>
<p>此时第一步处理器将变量S的更新后的数据写入到写缓冲器返回，接着马上执行了第二布进行S变量的读取。由于此时处理器对S变量的更新结果还停留在写缓冲器中，因此从高速缓存缓存行中读到的数据还是变量S的旧值。</p>
<p>为了解决这种问题，存储转发（Store Fowarding）这个概念上线了。其理论就是处理器在执行读操作时会先根据相应的内存地址从写缓冲器中查询。如果查到了直接返回，否则处理器才会从高速缓存中查找，这种从缓冲器中读取的技术就叫做存储转发。看图：</p>
<p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ed3628cbe8e414489142f6fb09a49d3~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></p>
<h4 id="内存重排序和可见性的问题">内存重排序和可见性的问题</h4>
<p>由于写缓冲器和无效化队列的出现，处理器的执行都变成了异步操作。缓冲器是每个处理器私有的，一个处理器所存储的内容是无法被其他处理器读取的。</p>
<p>举个例子：</p>
<p>CPU1 更新变量到缓冲器中，而CPU2因为无法读取到CPU1缓冲器内容所以从高速缓存中读取的仍然是该变量旧值。</p>
<p><strong>其实这就是写缓冲器导致StoreLoad重排序问题</strong>，而写缓冲器还会导致StoreStore重排序问题等。</p>
<p>为了使一个处理器上运行的线程对共享变量所做的更新被其他处理器上运行的线程读到，我们必须将写缓冲器的内容写到其他处理器的高速缓存上，从而使在缓存一致性协议作用下此次更新可以被其他处理器读取到。</p>
<p>处理器在写缓冲器满、I/O指令被执行时会将写缓冲器中的内容写入高速缓存中。但从变量更新角度来看，处理器本身无法保障这种更新的”及时“性。为了保证处理器对共享变量的更新可被其他处理器同步，编译器等底层系统借助一类称为内存屏障的特殊指令来实现。</p>
<p>内存屏障中的存储屏障（Store Barrier）会使执行该指令的处理器将写缓冲器内容写入高速缓存。</p>
<p>内存屏障中的加载屏障（Load Barrier）会根据无效化队列内容指定的内存地址，将相应处理器上的高速缓存中相应的缓存条目状态标记为I。</p>
<h2 id="四、内存屏障">四、内存屏障</h2>
<p>因为说了存储屏障（Store Barrier）和加载屏障（Load Barrier） ，所以这里再简单的提下内存屏障的概念。</p>
<p><strong>划重点：（你细品）</strong></p>
<p>处理器支持哪种内存重排序（LoadLoad重排序、LoadStore重排序、StoreStore重排序、StoreLoad重排序），就会提供相对应能够禁止重排序的指令，而这些指令就被称之为<strong>内存屏障</strong>（LoadLoad屏障、LoadStore屏障、StoreStore屏障、StoreLoad屏障）</p>
<p><strong>划重点：</strong></p>
<p>如果用X和Y来代替Load或Store,这类指令的作用就是禁止该指令左侧的任何 X 操作与该指令右侧的任何 Y 操作之间进行重排序（就是交换位置），确保指令左侧的所有 X 操作都优先于指令右侧的Y操作。</p>
<p>内存屏障的具体作用：</p>
<table>
<thead>
<tr>
<th style="text-align: center">屏障名称</th>
<th>示例</th>
<th>具体作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center">StoreLoad</td>
<td>Store1;Store2;Store3;<strong>StoreLoad</strong>;Load1;Load2;Load3</td>
<td>禁止StoreLoad重排序，确保屏障之前任何一个写（如Store2）的结果都会在屏障后任意一个读操作（如Load1）加载之前被写入</td>
</tr>
<tr>
<td style="text-align: center">StoreStore</td>
<td>Store1;Store2;Store3;<strong>StoreStore</strong>;Store4;Store5;Store6</td>
<td>禁止StoreStore重排序，确保屏障之前任何一个写（如Store1）的结果都会在屏障后任意一个写操作（如Store4）之前被写入</td>
</tr>
<tr>
<td style="text-align: center">LoadLoad</td>
<td>Load1;Load2;Load3;<strong>LoadLoad</strong>;Load4;Load5;Load6</td>
<td>禁止LoadLoad重排序，确保屏障之前任何一个读（如Load1）的数据都会在屏障后任意一个读操作（如Load4）之前被加载</td>
</tr>
<tr>
<td style="text-align: center">LoadStore</td>
<td>Load1;Load2;Load3;<strong>LoadStore</strong>;Store1;Store2;Store3</td>
<td>禁止LoadStore重排序，确保屏障之前任何一个读（如Load1）的数据都会在屏障后任意一个写操作（如Store1）的结果被写入高速缓存（或主内存）前被加载</td>
</tr>
</tbody>
</table>
<h2 id="五、总结">五、总结</h2>
<p>其实从头看到尾就会发现，一个技术点的出现往往是为了填补另一个的坑。</p>
<p>为了解决处理器与主内存之间的速度鸿沟，引入了高速缓存，却又导致了缓存一致性问题</p>
<p>为了解决缓存一致性问题，引入了如MESI等技术，又导致了处理器等待问题</p>
<p>为了解决处理器等待问题，引入了写缓冲和无效化队列，又导致了重排序和可见性问题</p>
<p>为了解决重排序和可见性问题，引入了内存屏障，舒坦。。。</p>
<blockquote>
<p>爱生活，爱编码，本文已收录<a href="http://www.jiagoujishu.com/">架构技术专栏</a>关注这个喜欢分享的地方。本文 架构技术专栏 已收录，有各种JVM、多线程、源码视频、资料以及技术文章等你来拿</p>
</blockquote>
<p><strong>往期推荐</strong></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzI0MjE4NTM5Mg==&amp;mid=2648975640&amp;idx=1&amp;sn=a8e85ae9ae8d17013490cf09ff92c54e&amp;chksm=f110acc7c66725d19ca1c743fb721434e48ee028804a808493e959aa4196625e246ae772a965&amp;scene=21#wechat_redirect">每日一个知识点系列：volatile的可见性原理</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzI0MjE4NTM5Mg==&amp;mid=2648975618&amp;idx=1&amp;sn=79e7f89bf1da2dbe81c3e2ff3f76ddfb&amp;chksm=f110acddc66725cba8a7667b81a90a51fccd9bf840bc6daa162204119b8e18d05f33a9b3ed40&amp;scene=21#wechat_redirect">(最新 9000字)  Spring Boot 配置特性解析</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzI0MjE4NTM5Mg==&amp;mid=2648975571&amp;idx=1&amp;sn=57c4ca669794a9137a1377eac654a3a6&amp;chksm=f110ad0cc667241a724552eae7a247ca4af6a2b047d29264e133888b4a81eb2e4706b4b19066&amp;scene=21#wechat_redirect">何时用多线程？多线程需要加锁吗？线程数多少最合理？</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzI0MjE4NTM5Mg==&amp;mid=2648975588&amp;idx=1&amp;sn=87b63472d26ef9f2a60890d4825604ac&amp;chksm=f110ad3bc667242d9831447fe1ed11dc00be836d6f21b68297aae71f02a7a9b0d11b6ad2bf0e&amp;scene=21#wechat_redirect">Spring Boot 知识清单（一）SpringApplication</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzI0MjE4NTM5Mg==&amp;mid=2648975553&amp;idx=1&amp;sn=afd1ff3f61edfab5c9e43e7ffd3e32ee&amp;chksm=f110ad1ec66724086514bcefe8467b8fc6f208c6b97f16b5a6ee2e0fc658f8db3016218fafcf&amp;scene=21#wechat_redirect">高并发系统，你需要知道的指标（RT...）</a></p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-10-11 21:27</span>&nbsp;
<a href="https://www.cnblogs.com/jiagoujishu/">架构技术专栏</a>&nbsp;
阅读(<span id="post_view_count">41</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13799459" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(13799459);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 631818, cb_blogApp = 'jiagoujishu', cb_blogUserGuid = '1a74eec6-4dd6-4822-d8d4-08d85494b69b';
    var cb_entryId = 13799459, cb_entryCreatedDate = '2020-10-11 21:27', cb_postType = 1;
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id='div-gpt-ad-1592366332455-0' style='width: 468px; height: 60px;'></div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverT2();
        deliverC1C2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 架构技术专栏
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>
