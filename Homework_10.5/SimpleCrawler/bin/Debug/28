<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta name="description" content="microtask 这一名词是 JS 中比较新的概念，几乎所有人都是在学习 ES6 的 Promise 时才接触这一新概念，我也不例外。当我刚开始学习 Promise 的时候，对其中回调函数的执行方式" />
    <meta property="og:description" content="microtask 这一名词是 JS 中比较新的概念，几乎所有人都是在学习 ES6 的 Promise 时才接触这一新概念，我也不例外。当我刚开始学习 Promise 的时候，对其中回调函数的执行方式" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>[译] 深入理解 JavaScript 事件循环（二）— task and microtask - Shelton_Dong - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=kXxbcm7tkkASG2_xwyD6Kw4CzHe0bT3mi0jyCb8YspQ" />
    <link id="MainCss" rel="stylesheet" href="/skins/codinglife/bundle-codinglife.min.css?v=dij5UHLPkhCwoV5SpUeOW7BnKC0vZ5-8GYi-drRcxLA" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/dong-xu/custom.css?v=OwoY54W2Zb57vYk3nZVzr2bFXh8=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/codinglife/bundle-codinglife-mobile.min.css?v=JtOonyglmq10yOLdtvmh-WsVtFwm8HRB8mR_g_TGArQ" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/dong-xu/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/dong-xu/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/dong-xu/wlwmanifest.xml" />
    <script>
        var currentBlogId = 317316;
        var currentBlogApp = 'dong-xu';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'CodingLife';
        var visitorUserId = '';
    </script>
        <script>
            var currentPostDateAdded = '2017-06-21 09:14';
        </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=fLUEwRea4WeqlJe_CLnNunLQZl_ViJFLgKpcNDuKptI"></script>
    
    
    
</head>
<body>
    <a name="top"></a>
    <div id="top_nav" class="navbar">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding">
                    <a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a>
                </li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=oS4PkibyMjZ9rGD5XAcLt99uW_s76Javy2up4dbnZNY" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" onclick="logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signin/?returnUrl=https://www.cnblogs.com/">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/dong-xu/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/dong-xu/">DongXu</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/dong-xu/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/Shelton_Dong">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/dong-xu/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
13&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
29</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/dong-xu/p/7000139.html">
    <span>[译] 深入理解 JavaScript 事件循环（二）— task and microtask</span>
    


</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
    <div id="cnblogs_post_description" style="display: none">
        microtask 这一名词是 JS 中比较新的概念，几乎所有人都是在学习 ES6 的 Promise 时才接触这一新概念，我也不例外。当我刚开始学习 Promise 的时候，对其中回调函数的执行方式特别着迷，于是乎便看到了 microtask 这一个单词，但是困难的是国内很少有关于这方面的文章，有一小部分人探讨过不过对其中的原理和机制的讲解也是十分晦涩难懂。直到我看到了 Jake Archibald 的文章，我才对 microtask 有了一个完整的认识，所以我便想把这篇文章翻译过来，供大家学习和参考。
    </div>
<div id="cnblogs_post_body" class="blogpost-body">
    <h2 class="dx-title">引言</h2>
<p>　　microtask 这一名词是 JS 中比较新的概念，几乎所有人都是在学习 ES6 的 Promise 时才接触这一新概念，我也不例外。当我刚开始学习 Promise 的时候，对其中回调函数的执行方式特别着迷，于是乎便看到了 microtask 这一个单词，但是困难的是国内很少有关于这方面的文章，有一小部分人探讨过不过对其中的原理和机制的讲解也是十分晦涩难懂。直到我看到了 Jake Archibald 的文章，我才对 microtask 有了一个完整的认识，所以我便想把这篇文章翻译过来，供大家学习和参考。</p>
<p>　　本篇文章绝大部分翻译自 Jake Archibald 的文章&nbsp;<a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/" target="_blank">Tasks, microtasks, queues and schedules</a>。有英文功底的同学建议阅读原著，毕竟人家比我写的好...</p>
<p>　　适合人群：有一定的 JavaScript 开发基础，对 JavaScript Event Loop 有基本的认识，掌握&nbsp;ES6 Promise 。</p>
<h2 class="dx-title">初识 Microtask</h2>
<p>　　让我们先来看一段代码，猜猜它将会以何种顺序输出：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> console.log('script start'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 2</span> 
<span style="color: rgba(0, 128, 128, 1)"> 3</span> setTimeout(<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)">() {
</span><span style="color: rgba(0, 128, 128, 1)"> 4</span>   console.log('setTimeout'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 5</span> }, 0<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 6</span> 
<span style="color: rgba(0, 128, 128, 1)"> 7</span> Promise.resolve().then(<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)">() {
</span><span style="color: rgba(0, 128, 128, 1)"> 8</span>   console.log('promise1'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 9</span> }).then(<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)">() {
</span><span style="color: rgba(0, 128, 128, 1)">10</span>   console.log('promise2'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">11</span> <span style="color: rgba(0, 0, 0, 1)">});
</span><span style="color: rgba(0, 128, 128, 1)">12</span> 
<span style="color: rgba(0, 128, 128, 1)">13</span> console.log('script end');</pre>
</div>
<p>　　你可以在这里查看输出结果：</p>
<p><iframe src="//jsfiddle.net/DevilShow/oyepa6nf/embedded/result/" frameborder="1" width="100%" height="300"></iframe></p>
<p>&nbsp;　　正确的答案是：<span style="background-color: rgba(192, 192, 192, 1)">'script start'</span>、<span style="background-color: rgba(192, 192, 192, 1)">'script end'</span>、<span style="background-color: rgba(192, 192, 192, 1)">'promise1'</span>、<span style="background-color: rgba(192, 192, 192, 1)">'promise2'</span>、<span style="background-color: rgba(192, 192, 192, 1)">'setTimeout'</span>。但是不同的浏览器可能会出现不同的输出顺序。</p>
<p>　　Microsoft Edge, FireFox 40, iOS Safari 以及 Safari 8.0.8 将会在 <span style="background-color: rgba(192, 192, 192, 1)">'promise1'</span> 和 <span style="background-color: rgba(192, 192, 192, 1)">'promise2'</span> 之前输出 <span style="background-color: rgba(192, 192, 192, 1)">'setTimeout'<span style="background-color: rgba(255, 255, 255, 1)">。但是奇怪的是，FireFox 39 和 Safari 8.0.7 却又是按照正确的顺序输出。</span></span></p>
<h4 class="dx-title">&nbsp;为什么？</h4>
<p><span style="background-color: rgba(192, 192, 192, 1)"><span style="background-color: rgba(255, 255, 255, 1)">　　要理解上面代码的输出原理，你就需要了解 JavaScript 的 event loop 是如何处理 tasks 以及 microtasks，当你第一次看到这一堆概念的时候，相信你也是和我一样的一头雾水，别急，让我们先深呼吸一下，然后开始我们的 microtask 之旅。</span></span></p>
<p><span style="background-color: rgba(192, 192, 192, 1)"><span style="background-color: rgba(255, 255, 255, 1)">　　每一个“线程”都有一个独立的 event loop，每一个 web worker 也有一个独立的 event loop，所以它可以独立的运行。如果不是这样的话，那么所有的窗口都将共享一个 event loop，即使它们可以同步的通信。event loop 将会持续不断的，有序的执行队列中的任务（tasks）。每一个 event loop 都有着众多不同的<span style="color: rgba(255, 0, 0, 1)">任务来源（task source）<span style="color: rgba(0, 0, 0, 1)">，这些 task source 能够保证其中的 task 能够有序的执行（参见标准 <a href="http://w3c.github.io/IndexedDB/#database-access-task-source" target="_blank">Indexed Database API 2.0</a>）。不过，在每一轮事件循环结束之后，浏览器可以自行选择将哪一个 source 当中的 task 加入到执行队列当中。这样也就使得了浏览器可以优先选择那些敏感性的任务，例如用户的的输入。（看完这段话，估计大部分人都晕了，别急... be patient）</span></span></span></span></p>
<p><span style="background-color: rgba(192, 192, 192, 1)"><span style="background-color: rgba(255, 255, 255, 1)"><span style="color: rgba(255, 0, 0, 1)"><span style="color: rgba(0, 0, 0, 1)">　　<strong>Task</strong> 是严格按照时间顺序压栈和执行的，所以浏览器能够使得 JavaScript 内部任务与 DOM 任务能够有序的执行。当一个 task 执行结束后，在下一个 task 执行开始前，浏览器可以对页面进行重新<span style="color: rgba(255, 0, 0, 1)">渲染<span style="color: rgba(0, 0, 0, 1)">。每一个 task 都是需要分配的，例如从用户的点击操作到一个点击事件，渲染HTML文档，同时还有上面例子中的 <span style="background-color: rgba(153, 153, 153, 1)"><span style="background-color: rgba(192, 192, 192, 1)">setTimeou</span><span style="background-color: rgba(192, 192, 192, 1)">t</span></span>。</span></span></span></span></span></span></p>
<p><span style="background-color: rgba(192, 192, 192, 1)"><span style="background-color: rgba(255, 255, 255, 1)"><span style="color: rgba(255, 0, 0, 1)"><span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(255, 0, 0, 1)"><span style="color: rgba(0, 0, 0, 1)">　　<span style="background-color: rgba(192, 192, 192, 1)">setTimeout</span> 的工作原理相信大家应该都知道，其中的延迟并不是完全精确的，这是因为 <span style="background-color: rgba(192, 192, 192, 1)">setTimeout</span> 它会在延迟时间结束后分配一个新的 task 至 event loop 中，而不是立即执行，所以 <span style="background-color: rgba(192, 192, 192, 1)">setTimeout</span> 的回调函数会等待前面的 task 都执行结束后再运行。这就是为什么 <span style="background-color: rgba(192, 192, 192, 1)">'setTimeout'</span> 会输出在 <span style="background-color: rgba(192, 192, 192, 1)">'script end'</span> 之后，因为 <span style="background-color: rgba(192, 192, 192, 1)">'script end'</span> 是第一个 task 的其中一部分，而 <span style="background-color: rgba(192, 192, 192, 1)">'setTimeout'</span> 则是一个新的 task。这里我们先解释了 event loop 的基本原理，接下来我们会通过这个来讲解&nbsp;microtask 的工作原理。</span></span></span></span></span></span></p>
<p><span style="background-color: rgba(192, 192, 192, 1)"><span style="background-color: rgba(255, 255, 255, 1)"><span style="color: rgba(255, 0, 0, 1)"><span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(255, 0, 0, 1)"><span style="color: rgba(0, 0, 0, 1)">　　<strong>Microtask</strong> 通常来说就是需要在当前 task 执行结束后立即执行的任务，例如需要对一系列的任务做出回应，或者是需要异步的执行任务而又不需要分配一个新的 task，这样便可以减小一点性能的开销。microtask 任务队列是一个与 task 任务队列相互独立的队列，microtask 任务将会在每一个 task 任务执行结束之后执行。每一个 task 中产生的 microtask 都将会添加到 microtask 队列中，microtask 中产生的 microtask 将会添加至当前队列的尾部，并且 microtask 会按序的处理完队列中的所有任务。microtask 类型的任务目前包括了 MutationObserver 以及 Promise 的回调函数。</span></span></span></span></span></span></p>
<p><span style="background-color: rgba(192, 192, 192, 1)"><span style="background-color: rgba(255, 255, 255, 1)"><span style="color: rgba(255, 0, 0, 1)"><span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(255, 0, 0, 1)"><span style="color: rgba(0, 0, 0, 1)">　　每当一个 Promise 被决议（或是被拒绝），便会将其回调函数添加至 microtask 任务队列中作为一个新的 microtask 。这也保证了 Promise 可以异步的执行。所以当我们调用 <span style="background-color: rgba(192, 192, 192, 1)">.then(resolve, reject)</span> 的时候，会立即生成一个新的 microtask 添加至队列中，这就是为什么上面的 <span style="background-color: rgba(192, 192, 192, 1)">'promise1'</span>&nbsp;和 <span style="background-color: rgba(192, 192, 192, 1)">'promise2'</span> 会输出在 <span style="background-color: rgba(192, 192, 192, 1)">'script end'</span> 之后，因为 microtask 任务队列中的任务必须等待当前 task 执行结束后再执行，而 <span style="background-color: rgba(192, 192, 192, 1)">'promise1'</span> 和 <span style="background-color: rgba(192, 192, 192, 1)">'promise2'</span> 输出在 <span style="background-color: rgba(192, 192, 192, 1)">'setTimeout'</span> 之前，这是因为 <span style="background-color: rgba(192, 192, 192, 1)">'setTimeout'</span> 是一个新的 task，而 microtask 执行在当前 task 结束之后，下一个 task 开始之前。</span></span></span></span></span></span></p>
<p><span style="background-color: rgba(192, 192, 192, 1)"><span style="background-color: rgba(255, 255, 255, 1)"><span style="color: rgba(255, 0, 0, 1)"><span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(255, 0, 0, 1)"><span style="color: rgba(0, 0, 0, 1)">　　下面这个 demo 将会逐步的分析 event loop 的运作方式：</span></span></span></span></span></span></p>
<p><iframe src="//jsfiddle.net/DevilShow/8Lausmo9/embedded/result/" frameborder="1" width="100%" height="560"></iframe></p>
<p>&nbsp;　　通过以上的 demo 相信大家对 microtask 的运作方式有了了解了吧，不得不说我十分佩服&nbsp;Jake Archibald ，人家自己一个字一个字的码了一个事件轮循器出来。作为一位膜拜者，我也一个字一个字的码了一个出来！...详情可参见引言中贴出的文章。</p>
<h4 class="dx-title">&nbsp;浏览器的兼容性</h4>
<p>　　有一些浏览器会输出：<span style="background-color: rgba(192, 192, 192, 1)">'script start'</span>、<span style="background-color: rgba(192, 192, 192, 1)">'script end'</span>、<span style="background-color: rgba(192, 192, 192, 1)">'setTimeout'</span>、<span style="background-color: rgba(192, 192, 192, 1)">'promise1'</span>、<span style="background-color: rgba(192, 192, 192, 1)">'promise2'</span>。这些浏览器将会在 <span style="background-color: rgba(192, 192, 192, 1)">'setTimeout'</span> 之后输出 Promise 的回调函数，这看起来像是这类浏览器不支持 microtask 而将 Promise 的回调函数作为一个新的 task 来执行。</p>
<p>　　不过这一点也是可以理解的，因为 Promise 是来自于 ECMAScript 而不是 HTML。ES 当中有一个 “jobs” 的概念，它和 microtask 很相似，不过他们之间的关系目前还没有一个明确的定义。不过，普遍的共识都认为，Promise 的回调函数是应该作为一个 microtask 来运行的。</p>
<p>　　如果说把 Promise 当做一个新的 task 来执行的话，这将会造成一些性能上的问题，因为 Promise 的回调函数可能会被延迟执行，因为在每一个 task 执行结束后浏览器可能会进行一些渲染工作。由于作为一个 task 将会和其他任务来源（task source）相互影响，这也会造成一些不确定性，同时这也将打破一些与其他 API 的交互，这样一来便会造成一系列的问题。</p>
<p>　　Edge 浏览器目前已经修复了这个问题（<a href="https://connect.microsoft.com/IE/feedback/details/1658365" target="_blank">an Edge ticket</a>），WebKit 似乎始终是标准的，Safari 终究也会修复这个问题，在 FireFox 43 中这个问题也已被修复。</p>
<h2 class="dx-title">&nbsp;如何判断 task 和 microtask</h2>
<p>　　直接测试输出是个很好的办法，看看输出的顺序是更像 Promise 还是更像 setTimeout，趋向于 Promise 的则是 microtask，趋向于 setTimeout 的则是 task。</p>
<p>　　还有一种明确的方式是查看标准。例如，<a href="https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timer-initialisation-steps" target="_blank">timer-initialisation-steps</a>&nbsp;标准的第 16 步指出 “Queue the task task”。（注意原文中指出的是 14 步，正确是应该是 16 步。）而 <a href="https://dom.spec.whatwg.org/#queue-a-mutation-record" target="_blank">queue-a-mutation-record</a>&nbsp;标准的第 5 步指出 “Queue a mutation observer compound microtask”。</p>
<p>　　同时需要注意的是，在 ES 当中称 microtask 为 “jobs”。比如 <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-performpromisethen" target="_blank">ES6标准</a>&nbsp;8.4节当中的 “EnqueueJob” 意思指添加一个 microtask。</p>
<p>　　现在，让我们来一个更复杂的例子...</p>
<h2 class="dx-title">&nbsp;进阶 microtask</h2>
<p>　　在此之前，你需要了解 <span style="background-color: rgba(192, 192, 192, 1)">MutationObserver</span> 的使用方法</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">1</span> <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">div </span><span style="color: rgba(255, 0, 0, 1)">class</span><span style="color: rgba(0, 0, 255, 1)">="outer"</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">2</span>   <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">div </span><span style="color: rgba(255, 0, 0, 1)">class</span><span style="color: rgba(0, 0, 255, 1)">="inner"</span><span style="color: rgba(0, 0, 255, 1)">&gt;&lt;/</span><span style="color: rgba(128, 0, 0, 1)">div</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">3</span> <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">div</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span></pre>
</div>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(0, 0, 255, 1)">var</span> outer = document.querySelector('.outer'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 2</span> <span style="color: rgba(0, 0, 255, 1)">var</span> inner = document.querySelector('.inner'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 3</span> 
<span style="color: rgba(0, 128, 128, 1)"> 4</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 给 outer 添加一个观察者</span>
<span style="color: rgba(0, 128, 128, 1)"> 5</span> <span style="color: rgba(0, 0, 255, 1)">new</span> MutationObserver(<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)">() {
</span><span style="color: rgba(0, 128, 128, 1)"> 6</span>   console.log('mutate'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 7</span> <span style="color: rgba(0, 0, 0, 1)">}).observe(outer, {
</span><span style="color: rgba(0, 128, 128, 1)"> 8</span>   attributes: <span style="color: rgba(0, 0, 255, 1)">true</span>
<span style="color: rgba(0, 128, 128, 1)"> 9</span> <span style="color: rgba(0, 0, 0, 1)">});
</span><span style="color: rgba(0, 128, 128, 1)">10</span> 
<span style="color: rgba(0, 128, 128, 1)">11</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> click 回调函数</span>
<span style="color: rgba(0, 128, 128, 1)">12</span> <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> onClick() {
</span><span style="color: rgba(0, 128, 128, 1)">13</span>   console.log('click'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">14</span> 
<span style="color: rgba(0, 128, 128, 1)">15</span>   setTimeout(<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)">() {
</span><span style="color: rgba(0, 128, 128, 1)">16</span>     console.log('timeout'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">17</span>   }, 0<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">18</span> 
<span style="color: rgba(0, 128, 128, 1)">19</span>   Promise.resolve().then(<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)">() {
</span><span style="color: rgba(0, 128, 128, 1)">20</span>     console.log('promise'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">21</span> <span style="color: rgba(0, 0, 0, 1)">  });
</span><span style="color: rgba(0, 128, 128, 1)">22</span> 
<span style="color: rgba(0, 128, 128, 1)">23</span>   outer.setAttribute('data-random'<span style="color: rgba(0, 0, 0, 1)">, Math.random());
</span><span style="color: rgba(0, 128, 128, 1)">24</span> <span style="color: rgba(0, 0, 0, 1)">}
</span><span style="color: rgba(0, 128, 128, 1)">25</span> 
<span style="color: rgba(0, 128, 128, 1)">26</span> inner.addEventListener('click'<span style="color: rgba(0, 0, 0, 1)">, onClick);
</span><span style="color: rgba(0, 128, 128, 1)">27</span> outer.addEventListener('click', onClick);</pre>
</div>
<p>　　先试着猜猜看程序将会如何输出，你可以在这里查看输出结果：</p>
<p><iframe src="//jsfiddle.net/DevilShow/gfpr69eh/embedded/result/" frameborder="1" width="100%" height="300"></iframe></p>
<p>&nbsp;　　猜对了吗？不过在这里不同的浏览器可能会有不同的结果。</p>
<table style="height: 200px; width: 604px" border="0" cellpadding="1" align="center">
<tbody>
<tr>
<td style="text-align: center"><span style="font-size: 18px">Chrome</span></td>
<td style="text-align: center"><span style="font-size: 18px">FireFox</span></td>
<td style="text-align: center"><span style="font-size: 18px">Safari</span></td>
<td style="text-align: center"><span style="font-size: 18px">Edge</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">click</span></td>
<td><span style="font-size: 16px">click　　</span></td>
<td><span style="font-size: 16px">click</span></td>
<td><span style="font-size: 16px">click</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">promise</span></td>
<td><span style="font-size: 16px">mutate</span></td>
<td><span style="font-size: 16px">mutate</span></td>
<td><span style="font-size: 16px">click</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">mutate</span></td>
<td><span style="font-size: 16px">click</span></td>
<td><span style="font-size: 16px">click</span></td>
<td><span style="font-size: 16px">mutate</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">click</span></td>
<td><span style="font-size: 16px">mutate</span></td>
<td><span style="font-size: 16px">mutate</span></td>
<td><span style="font-size: 16px">timeout</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">promise</span></td>
<td><span style="font-size: 16px">timeout</span></td>
<td><span style="font-size: 16px">promise</span></td>
<td><span style="font-size: 16px">promise</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">mutate</span></td>
<td><span style="font-size: 16px">promise</span></td>
<td><span style="font-size: 16px">promise</span></td>
<td><span style="font-size: 16px">timeout</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">timeout</span></td>
<td><span style="font-size: 16px">promise</span></td>
<td><span style="font-size: 16px">timeout</span></td>
<td><span style="font-size: 16px">promise</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">timeout</span></td>
<td><span style="font-size: 16px">timeout</span></td>
<td><span style="font-size: 16px">timeout</span></td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
<h4 class="dx-title">&nbsp;谁是正确答案？</h4>
<p>&nbsp;　　click 的回调函数是一个 task，而 Promise 和 MutationObserver 是一个 microtask，setTimeout 是一个 task，所以让我们一步一步的来：</p>
<p><iframe src="//jsfiddle.net/DevilShow/x0kcnbnn/embedded/result/" frameborder="1" width="100%" height="560"></iframe></p>
<p>&nbsp;　　通过以上 demo 我们可以看出，Chrome 给出的是正确答案，这里有一点与之前 demo 不同之处在于，这里的 task 是一个回调函数而不是当前执行的脚本，所以我们可以得出结论：用户操作的回调函数也是一个 task ，并且只要一个 task 执行结束且 JS stack 为空时，这时便检查 microtask ，如果不为空，则执行 microtask 队列。我们可以参见 HTML 标准：</p>
<blockquote>
<p>If the&nbsp;<a href="https://html.spec.whatwg.org/multipage/webappapis.html#stack-of-script-settings-objects">stack of script settings objects</a>&nbsp;is now empty,&nbsp;<a href="https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint">perform a microtask checkpoint</a></p>
<p>—&nbsp;<a href="https://html.spec.whatwg.org/multipage/webappapis.html#clean-up-after-running-a-callback">HTML: Cleaning up after a callback</a>&nbsp;step 3</p>
</blockquote>
<p>&nbsp;</p>
<blockquote>
<p>Execution of a Job can be initiated only when there is no running execution context and the execution context stack is empty…</p>
<p>—&nbsp;<a href="http://www.ecma-international.org/ecma-262/6.0/#sec-jobs-and-job-queues">ECMAScript: Jobs and Job Queues</a></p>
</blockquote>
<p>　　注意在 ES 当中称 microtask 为 jobs。</p>
<h2 class="dx-title">&nbsp;为什么不同的浏览器表现不同？</h2>
<p>　　通过上面的例子可以测试出，FireFox 和 Safari 能够正确的执行 microtask 队列，这一点可以通过 MutationObserver 的表现中看出，不过 Promise 被添加至事件队列中的方式好像有些不同。 这一点也是能够理解的，由于 jobs 和 microtasks 的关系以及概念目前还比较模糊，不过人们都普遍的期望他们都能够在两个事件监听器之间执行。这里有 <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1193394" target="_blank">FireFox</a> 和 <a href="https://bugs.webkit.org/show_bug.cgi?id=147933" target="_blank">Safari</a> 的 BUG 记录。（目前 Safari 已经修复了这一 BUG）</p>
<p>　　在 Edge 中我们可以明显的看出其压入 Promise 的方式是错误的，同时其执行 microtask 队列的方式也不正确，它没有在两个事件监听器之间执行，反而是在所有的事件监听器之后执行，所以才会只输出了一次 <span style="background-color: rgba(192, 192, 192, 1)">mutate</span>&nbsp;。<a href="https://connect.microsoft.com/IE/feedbackdetail/view/1658386/microtasks-queues-should-be-processed-following-event-listeners" target="_blank">Edge bug ticket</a>&nbsp;（目前已修复）</p>
<h2 class="dx-title">&nbsp;驾驭 microtask</h2>
<p>　　到了这里，相信大家已经习得了 microtask 的运行机制了吧，不过我们用以上的例子再做一点点小变化，比如我们运行一个：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">1</span> inner.click();</pre>
</div>
<p>　　看看会发生什么？</p>
<p><iframe src="//jsfiddle.net/DevilShow/ns6gjLk4/embedded/result/" frameborder="1" width="100%" height="300"></iframe></p>
<p>&nbsp;　　同样，这里不同的浏览器表现也是不一样的：</p>
<table style="height: 211px; width: 564px" border="0" cellpadding="1" align="center">
<tbody>
<tr>
<td style="text-align: center"><strong><span style="font-size: 18px">Chrome</span></strong></td>
<td style="text-align: center"><strong><span style="font-size: 18px">FireFox</span></strong></td>
<td style="text-align: center"><span style="font-size: 18px"><strong>Safari&nbsp;</strong></span></td>
<td style="text-align: center"><strong><span style="font-size: 18px">Edge&nbsp;</span></strong></td>
</tr>
<tr>
<td><span style="font-size: 16px">click</span></td>
<td><span style="font-size: 16px">click　　</span></td>
<td><span style="font-size: 16px">click</span></td>
<td><span style="font-size: 16px">click</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">click</span></td>
<td><span style="font-size: 16px">click</span></td>
<td><span style="font-size: 16px">click</span></td>
<td><span style="font-size: 16px">click</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">promise</span></td>
<td><span style="font-size: 16px">mutate</span></td>
<td><span style="font-size: 16px">mutate</span></td>
<td><span style="font-size: 16px">mutate</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">mutate</span></td>
<td><span style="font-size: 16px">timeout</span></td>
<td><span style="font-size: 16px">promise</span></td>
<td><span style="font-size: 16px">timeout</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">promise</span></td>
<td><span style="font-size: 16px">promise</span></td>
<td><span style="font-size: 16px">promise</span></td>
<td><span style="font-size: 16px">promise</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">timeout</span></td>
<td><span style="font-size: 16px">promise</span></td>
<td><span style="font-size: 16px">timeout</span></td>
<td><span style="font-size: 16px">timeout</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">timeout</span></td>
<td><span style="font-size: 16px">timeout</span></td>
<td><span style="font-size: 16px">timeout</span></td>
<td><span style="font-size: 16px">promise</span></td>
</tr>
</tbody>
</table>
<p>　　奇怪的是，在 Chrome 的个别版本里可能会得到不同的结果，究竟谁是正确答案？让我们一步一步的分析：</p>
<p><iframe src="//jsfiddle.net/DevilShow/zhqo9L6z/embedded/result" frameborder="1" width="100%" height="560"></iframe></p>
<p>&nbsp;　　从上面 demo 可以看出，正确的答案应该是：<span style="background-color: rgba(192, 192, 192, 1)">'click'</span>、<span style="background-color: rgba(192, 192, 192, 1)">'click'</span>、<span style="background-color: rgba(192, 192, 192, 1)">'promise'</span>、<span style="background-color: rgba(192, 192, 192, 1)">'mutate'</span>、<span style="background-color: rgba(192, 192, 192, 1)">'promise'</span>、<span style="background-color: rgba(192, 192, 192, 1)">'timeout'</span>、<span style="background-color: rgba(192, 192, 192, 1)">'timeout'</span>。所以看来 Chrome 给出的是正确答案。</p>
<p>　　在前一个 demo 中，microtask 将会在两个 click 时间监听器之间运行，但是在这个 demo 中，由于我们调用 <span style="background-color: rgba(192, 192, 192, 1)">.click()</span>&nbsp;，使得事件监听器的回调函数和当前运行的脚本<span style="color: rgba(255, 0, 0, 1)">同步</span>执行而不是<span style="color: rgba(255, 0, 0, 1)">异步<span style="color: rgba(0, 0, 0, 1)">，所以当前脚本的执行栈会一直压在 JS 执行栈 当中。所以在这个 demo 中 microtask 不会在每一个 click 事件之后执行，而是在两个 click 事件执行完成之后执行。所以在这里我们可以再次的对 microtask 的检查点进行定义：当执行栈(JS Stack)为空时，执行一次 microtask 检查点。这也确保了无论是一个&nbsp;task 还是一个&nbsp;microtask 在执行完毕之后都会生成一个 microtask 检查点，也保证了 microtask 队列能够一次性执行完毕。&nbsp;</span></span></p>
<h2 class="dx-title">&nbsp;总结</h2>
<p>　　关于 microtask 的讲解就到此结束了，同学们有没有一种渐入佳境的感觉呢？现在我们来对 microtask 进行一下总结：</p>
<ul>
<li>　　microtask 和 task 一样严格按照时间先后顺序执行。</li>
<li>　　microtask 类型的任务包括 Promise callback 和 Mutation callback。</li>
<li>&nbsp;　　当 JS 执行栈为空时，便生成一个 microtask 检查点。</li>
</ul>
<p>　　JS 的 Event Loop 一直以来都是一个比较重要的部分，虽然在学完了过后一下子感觉不出有什么具体的卵用...但是，一旦 Event Loop 的运行机制印入了你的脑海里之后，对你的编程能力和程序设计能力的提高是帮助很大的。关于 Event Loop 的知识很少有相关的书籍有写到，一是因为这一块比较晦涩难懂，短时间内无法领略其精髓，二是因为具体能力提升不明显，不如认识几个 API 来的快，但是这却是我们编程的内力，他能在潜意识中左右着我们编程时思考问题的方式。</p>
<p>　　本文的 demo 都放在了 <a href="https://jsfiddle.net/" target="_blank">jsfiddle</a> 上面，可随意转载（还是注明一下出处吧...）。</p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2017-06-21 09:14</span>&nbsp;
<a href="https://www.cnblogs.com/dong-xu/">Shelton_Dong</a>&nbsp;
阅读(<span id="post_view_count">9333</span>)&nbsp;
评论(<span id="post_comment_count">2</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=7000139" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(7000139);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 317316, cb_blogApp = 'dong-xu', cb_blogUserGuid = 'baf66a17-e94c-e611-9fc1-ac853d9f53cc';
    var cb_entryId = 7000139, cb_entryCreatedDate = '2017-06-21 09:14', cb_postType = 1;
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id='div-gpt-ad-1592366332455-0' style='width: 468px; height: 60px;'></div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverT2();
        deliverC1C2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 Shelton_Dong
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>
