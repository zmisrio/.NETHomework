<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta name="description" content="ASP.NET Core MVC 包含对通过固定格式或根据客户端规范来设置响应数据格式的内置支持。&#xD;&#xA;&#xD;&#xA;     ASP.NET Web API的内容协商（Content Negotiation）机" />
    <meta property="og:description" content="ASP.NET Core MVC 包含对通过固定格式或根据客户端规范来设置响应数据格式的内置支持。&#xD;&#xA;&#xD;&#xA;     ASP.NET Web API的内容协商（Content Negotiation）机" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>使用 ASP.NET Core MVC 创建 Web API——响应数据的内容协商（七） - DotNet菜园 - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=kXxbcm7tkkASG2_xwyD6Kw4CzHe0bT3mi0jyCb8YspQ" />
    <link id="MainCss" rel="stylesheet" href="/skins/classicblue/bundle-classicblue.min.css?v=C_xOBodTdu7qViYoEOWb5uyE0XIl-SuwRkgFEwSDOCc" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/classicblue/bundle-classicblue-mobile.min.css?v=arJ4BmwdBcUZrSduKjIvQKPiliQ99OBUW7yasPqJtdY" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/chillsrc/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/chillsrc/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/chillsrc/wlwmanifest.xml" />
    <script>
        var currentBlogId = 13897;
        var currentBlogApp = 'chillsrc';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'ClassicBlue';
        var visitorUserId = '';
    </script>
        <script>
            var currentPostDateAdded = '2019-05-14 01:35';
        </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=fLUEwRea4WeqlJe_CLnNunLQZl_ViJFLgKpcNDuKptI"></script>
    
    
    
</head>
<body>
    <a name="top"></a>
    <div id="top_nav" class="navbar navbar-custom">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding">
                    <a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a>
                </li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=oS4PkibyMjZ9rGD5XAcLt99uW_s76Javy2up4dbnZNY" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" onclick="logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signin/?returnUrl=https://www.cnblogs.com/">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/chillsrc/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/chillsrc/">DotNet菜园</a>
</h1>
<h2>
专注所以专业,专业所以专注
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/chillsrc/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/DotNet%E8%8F%9C%E5%9B%AD">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/chillsrc/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
276&nbsp; </span>
<span id="stats_article_count">文章 - 
32&nbsp; </span>
<span id="stats-comment_count">评论 - 
836</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chillsrc/p/10861728.html">
    <span>使用 ASP.NET Core MVC 创建 Web API——响应数据的内容协商（七）</span>
    


</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
    <div id="cnblogs_post_description" style="display: none">
        ASP.NET Core MVC 包含对通过固定格式或根据客户端规范来设置响应数据格式的内置支持。

     ASP.NET Web API的内容协商（Content Negotiation）机制的理想情况是这样的：客户端在请求头的Accept字段中指定什么样的MIME类型，Web API服务端就返回对应的MIME类型的内容（响应头的中Content-Type就是Accept中指定的MIME类型）。而现实情况是，Web API服务端能返回什么MIME类型的响应类型取决于有没有对应这个MIME类型的MediaTypeFormatter。ASP.NET Core Web API的默认提供JsonMediaTypeFormatter，如果要支持 XmlMediaTypeFormatter需要进行配置。

      ASP.NET Core MVC 使用的默认格式是 JSON。 内容协商由 ObjectResult 实现。 它还内置于从帮助程序方法（全部基于 ObjectResult）返回的特定于状态代码的操作结果中。 还可以返回一个模型类型（已定义为数据传输类型的类），框架将自动
    </div>
<div id="cnblogs_post_body" class="blogpost-body">
    <p align="left"><span style="font-size: 16px"><strong><strong><span style="color: rgba(0, 0, 255, 1)"><span style="color: rgba(0, 0, 255, 1)"><span style="color: rgba(0, 0, 255, 1)"><span class="postTitle2"><span style="color: rgba(0, 0, 255, 1)">使用 ASP.NET Core MVC 创建 Web API</span></span></span></span></span></strong></strong></span></p>
<p align="left"><span style="color: rgba(0, 0, 255, 1); font-size: 16px"><a id="homepage1_HomePageDays_DaysList_ctl00_DayList_TitleUrl_0" class="postTitle2" href="https://www.cnblogs.com/chillsrc/p/10614598.html"><span style="color: rgba(0, 0, 255, 1)">使用 ASP.NET Core MVC 创建 Web API（一）</span></a></span></p>
<p><span style="color: rgba(0, 0, 255, 1); font-size: 16px"><a id="homepage1_HomePageDays_DaysList_ctl00_DayList_TitleUrl_0" class="postTitle2" href="https://www.cnblogs.com/chillsrc/p/10649898.html"><span style="color: rgba(0, 0, 255, 1)">使用 ASP.NET Core MVC 创建 Web API（二）</span></a></span></p>
<p><span style="font-size: 16px; color: rgba(0, 0, 255, 1)">&nbsp;<a id="homepage1_HomePageDays_DaysList_ctl00_DayList_TitleUrl_0" class="postTitle2" href="https://www.cnblogs.com/chillsrc/p/10697463.html"><span style="color: rgba(0, 0, 255, 1)">使用 ASP.NET Core MVC 创建 Web API（三）</span></a></span></p>
<p><span style="color: rgba(0, 0, 255, 1); font-size: 16px"><a id="homepage1_HomePageDays_DaysList_ctl00_DayList_TitleUrl_0" class="postTitle2" href="https://www.cnblogs.com/chillsrc/p/10727666.html"><span style="color: rgba(0, 0, 255, 1)">使用 ASP.NET Core MVC 创建 Web API（四）</span></a></span></p>
<h2><span style="color: rgba(0, 0, 255, 1); font-size: 16px"><a id="homepage1_HomePageDays_DaysList_ctl00_DayList_TitleUrl_0" class="postTitle2" href="https://www.cnblogs.com/chillsrc/p/10768738.html"><span style="color: rgba(0, 0, 255, 1)">使用 ASP.NET Core MVC 创建 Web API（五）</span></a></span></h2>
<p><span style="font-size: 16px; color: rgba(0, 0, 255, 1)"><a id="homepage1_HomePageDays_DaysList_ctl00_DayList_TitleUrl_0" class="postTitle2" href="https://www.cnblogs.com/chillsrc/p/10824919.html"><span style="color: rgba(0, 0, 255, 1)">使用 ASP.NET Core MVC 创建 Web API（六）</span></a></span></p>
<p>&nbsp;</p>
<p><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp; ASP.NET Core MVC 包含对通过固定格式或根据客户端规范来设置响应数据格式的内置支持。</span></p>
<p><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp; ASP.NET Web API的内容协商（Content Negotiation）机制的理想情况是这样的：客户端在请求头的Accept字段中指定什么样的MIME类型，Web API服务端就返回对应的MIME类型的内容（响应头的中Content-Type就是Accept中指定的MIME类型）。而现实情况是，Web API服务端能返回什么MIME类型的响应类型取决于有没有对应这个MIME类型的MediaTypeFormatter。ASP.NET Core Web API的默认提供JsonMediaTypeFormatter，如果要支持 XmlMediaTypeFormatter需要进行配置。</span></p>
<p><span style="font-size: 16px">&nbsp;&nbsp; &nbsp;&nbsp; ASP.NET Core MVC 使用的默认格式是 JSON。 内容协商由 <code>ObjectResult</code> 实现。 它还内置于从帮助程序方法（全部基于 <code>ObjectResult</code>）返回的特定于状态代码的操作结果中。 还可以返回一个模型类型（已定义为数据传输类型的类），框架将自动将其打包在 <code>ObjectResult</code> 中。</span></p>
<p align="left"><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 以下操作方法返回一个对象实例和 <code>NotFound</code> 帮助程序方法：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br></span></p>
<div class="cnblogs_code">
<pre>[HttpGet(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{id}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
        </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">async</span> Task&lt;ActionResult&lt;Book&gt;&gt; GetBookItem(<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> id)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> bookItem = <span style="color: rgba(0, 0, 255, 1)">await</span><span style="color: rgba(0, 0, 0, 1)"> _context.Book.FindAsync(id); 

            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (bookItem == <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
            {
                </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> NotFound();
            }
            </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> bookItem;
        }</span></pre>
</div>
<p><span style="font-size: 16px">&nbsp;&nbsp;&nbsp; 将返回 JSON 格式的响应，除非请求了另一个格式且服务器可以返回所请求格式。 可以使用 Rester工具创建包括 Accept 标头的请求并指定另一种格式。 在此情况下，如果服务器有可以生成所请求格式的响应的格式化程序，则结果会以服务器首选的格式返回。</span></p>
<p><span style="font-size: 16px">&nbsp;&nbsp;&nbsp; 1) 在Visual Studio 2017中按F5，启动BookApi应用程序。</span></p>
<p><span style="font-size: 16px">&nbsp;&nbsp;&nbsp; 2) 打开Firefox浏览器，并打开 Rester，在Reseter中，将 HTTP 方法设置为 <code>GET</code>。</span></p>
<p><span style="font-size: 16px">&nbsp;&nbsp; 3) 然后在URL输入框中输入要获取的对象URI，例如 <code>http://localhost:5000/api/book/25</code></span></p>
<p><span style="font-size: 16px">&nbsp;&nbsp; 4) 选择“Headers”选项卡，选择“<code>Accept</code>”选项，并将值设置为 JSON (<code>application/json</code>)。</span></p>
<p><span style="font-size: 16px">&nbsp;&nbsp;&nbsp; 5) 使用鼠标点击“Send”按钮。请求将收到具有作书籍数据的“200 正常”响应。如下图。</span></p>
<p><span style="font-size: 16px">&nbsp;<img src="https://img2018.cnblogs.com/blog/10343/201905/10343-20190514132903211-1412777851.png" alt=""></span></p>
<p><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp; 6) 选择“Headers”选项卡，选择“<code>Accept</code>”选项，并将值设置为 xml (<code>application/xml</code>)。</span></p>
<p><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp; 7) 使用鼠标点击“Send”按钮。请求将收到具有作书籍数据的“200 正常”响应。如下图。我们虽然指定 <code>Accept为 application/xml</code>，但是在默认情况下，ASP.NET Core MVC 仅支持 JSON。所以，即使指定另一种格式，返回的结果仍然是 JSON 格式，而不是我们希望的xml。如下图。</span></p>
<p><span style="font-size: 16px">&nbsp;<img src="https://img2018.cnblogs.com/blog/10343/201905/10343-20190514132930011-1288302619.png" alt=""></span></p>
<p><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 控制器操作可以返回 POCO（普通旧 CLR 对象），在这种情况下，ASP.NET Core MVC 将自动创建打包对象的 <code>ObjectResult</code>。 客户端将获取设有格式的序列化对象（默认为 JSON 格式，可以配置 XML 或其他格式）。 如果返回的对象为 <code>null</code>，那么框架将返回 <code>204 No Content</code> 响应。</span></p>
<p align="left"><span style="font-size: 16px">&nbsp;&nbsp;&nbsp; 1） 在Visual Studio 2017中打开BookController.cs文件，添加以下 <code>GetBook</code> 方法返回实体对象，代码如下： <br></span></p>
<div class="cnblogs_code">
<pre>[HttpGet(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{id}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
        </span><span style="color: rgba(0, 0, 255, 1)">public</span>  Book GetBook(<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> id)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> bookItem =<span style="color: rgba(0, 0, 0, 1)">  _context.Book.Find(id);       
            </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> bookItem;
        }</span></pre>
</div>
<p><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp; 2）在Visual Studio 2017中按F5启动Web应用程序。</span></p>
<p><span style="font-size: 16px">&nbsp;&nbsp;&nbsp; 3） 打开浏览器，一并打开Rester。</span></p>
<p><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp; 4) 将 HTTP 方法设置为 <code>GET</code>。将请求 URL 设置为 <code>http://localhost:5000/api/Book/25</code></span></p>
<p><span style="font-size: 16px">&nbsp;&nbsp;&nbsp; 5) 使用鼠标点击“Send”按钮。请求将收到具有作书籍数据的“200 正常”响应。如下图。</span></p>
<p><span style="font-size: 16px"><img src="https://img2018.cnblogs.com/blog/10343/201905/10343-20190514133029696-262234947.png" alt=""></span></p>
<p><span style="font-size: 16px">&nbsp;&nbsp; 6） 请求无效将收到“204 无内容”响应。 如下图。</span></p>
<p><span style="font-size: 16px">&nbsp;<img src="https://img2018.cnblogs.com/blog/10343/201905/10343-20190514133041736-1787096626.png" alt=""></span></p>
<h2><span style="font-size: 16px">&nbsp;&nbsp;&nbsp; 配置格式化程序</span></h2>
<p><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如果应用程序需要支持默认 JSON 格式以外的其他格式，那么可以添加 NuGet 包并配置 MVC 来支持它们。输入和输出的格式化程序不同。输入格式化程序由模型绑定使用；输出格式化程序用来设置响应格式。 还可以配置自定义格式化程序。请求头的Accept中除非指定为application/xml或者application/json，否则指定其它任何MIME，</span></p>
<h3><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 添加 XML 格式支持</span></h3>
<p><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在Visual Studio 2017若要添加对 XML 格式的支持，请安装 <code>Microsoft.AspNetCore.Mvc.Formatters.Xml</code> NuGet 包。</span></p>
<p align="left"><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp; 1. 在Visual Studio 2017的菜单&gt;工具&gt;选项对话框中，选择“NuGet包管理器”中的常规，根据自己需要，设置默认包管理格式，如下图。</span></p>
<p align="left"><span style="font-size: 16px"><img src="https://img2018.cnblogs.com/blog/10343/201905/10343-20190514133103687-60557821.png" alt=""></span></p>
<p align="left"><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp; 2. 在解决方案资源管理器中，右键单击“引用”，选择“管理 NuGet 程序包”，如下图。</span></p>
<p><span style="font-size: 16px">&nbsp;<img src="https://img2018.cnblogs.com/blog/10343/201905/10343-20190514133113407-47865157.png" alt=""></span></p>
<p align="left"><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp; 3.将“nuget.org”选择为“包源”，选择“浏览”选项卡并搜索“<code>Microsoft.AspNetCore.Mvc.Formatters.Xml</code>”，在列表中选择该包，然后选择“安装”，如下图。</span></p>
<p><span style="font-size: 16px">&nbsp;<img src="https://img2018.cnblogs.com/blog/10343/201905/10343-20190514133127773-1722935730.png" alt=""></span></p>
<p><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4.在Visual Studio 2017中打开Startup.cs文件，将 XmlSerializerFormatters 配置添加到 Startup类的ConfigureServices方法中。代码如下：</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> ConfigureServices(IServiceCollection services)
        {
            services.AddDbContext</span>&lt;BookContext&gt;(options =&gt;   options.UseSqlServer(Configuration.GetConnectionString(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">BookContext</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">))); <br>           services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2)
                .AddXmlSerializerFormatters();
        }</span></pre>
</div>
<p><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 或者，可以仅添加输出格式化程序：</span></p>
<div class="cnblogs_code">
<pre>services.AddMvc(options =&gt;<span style="color: rgba(0, 0, 0, 1)">
{
    options.OutputFormatters.Add(</span><span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> XmlSerializerOutputFormatter());
});</span></pre>
</div>
<p><span style="font-size: 16px"><code>&nbsp;&nbsp; </code>通过上面的代码我们添加了对 XML 格式的支持，控制器方法会基于请求的 <code>Accept</code> 标头返回相应的格式。接下来我们来测试一下。</span></p>
<p><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp; 1) 在Visual Studio 2017中按F5，启动BookApi应用程序。</span></p>
<p><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp; 2) 打开Firefox浏览器，并打开 Rester，在Reseter中，将 HTTP 方法设置为 <code>GET</code>。</span></p>
<p><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp; 3) 选择“Headers”选项卡，选择“<code>Accept</code>”选项，并将值设置为 xml (<code>application/xml</code>)。</span></p>
<p align="left"><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp; 4) 使用鼠标左键，单击“SEND”按钮。 响应返回200，响应窗格显示 <code>Content-Type: application/xml</code> 标头，且 <code>Book</code> 对象已序列化为 XML。如下图。</span></p>
<p><span style="font-size: 16px">&nbsp;<img src="https://img2018.cnblogs.com/blog/10343/201905/10343-20190514133258678-1454123468.png" alt=""></span></p>
<p><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp; 5) 选择“Headers”选项卡，选择“<code>Accept</code>”选项，并将值设置为 JSON (<code>application/json</code>)。</span></p>
<p><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6) 使用鼠标左键，单击“SEND”按钮。 响应返回200，响应窗格显示 <code>Content-Type: application/json</code> 标头，且 <code>Book</code> 对象已序列化为 JSON。如下图。从图片中可以看到请求了设置 <code>Accept: application/json</code> 的标头，且响应也将它指定为其 <code>Content-Type</code>。 <code>BOOK</code> 对象以 JSON 格式显示在响应正文中。</span></p>
<p align="left"><span style="font-size: 16px"><img src="https://img2018.cnblogs.com/blog/10343/201905/10343-20190514133333875-1832099809.png" alt=""> <br></span></p>
<h3><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp; 内容协商过程</span></h3>
<p><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 内容协商仅在 <code>Accept</code> 标头出现在请求中时发生。 请求包含 accept 标头时，框架会以最佳顺序枚举 accept 标头中的媒体类型，并且尝试查找可以生成一种由 accept 标头指定格式的响应的格式化程序。 如果未找到可以满足客户端请求的格式化程序，框架将尝试找到第一个可以生成响应的格式化程序（除非开发人员配置 <code>MvcOptions</code> 上的选项以返回“406 不可接受”）。 如果请求指定 XML，但是未配置 XML 格式化程序，那么将使用 JSON 格式化程序。 一般来说，如果没有配置可以提供所请求格式的格式化程序，那么使用第一个可以设置对象格式的格式化程序。 如果不提供任何标头，则将使用第一个可以处理要返回的对象的格式化程序来序列化响应。 在此情况下，没有任何协商发生 - 服务器确定将使用的格式。</span></p>
<p><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如果 Accept 标头包含 <code>*/*</code>，则将忽略该标头，除非 <code>RespectBrowserAcceptHeader</code> 在 <code>MvcOptions</code> 上设置为 true。</span></p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2019-05-14 13:35</span>&nbsp;
<a href="https://www.cnblogs.com/chillsrc/">DotNet菜园</a>&nbsp;
阅读(<span id="post_view_count">2174</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=10861728" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(10861728);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 13897, cb_blogApp = 'chillsrc', cb_blogUserGuid = 'c642360b-63cf-dd11-9e4d-001cf0cd104b';
    var cb_entryId = 10861728, cb_entryCreatedDate = '2019-05-14 13:35', cb_postType = 1;
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id='div-gpt-ad-1592366332455-0' style='width: 468px; height: 60px;'></div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverT2();
        deliverC1C2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 DotNet菜园
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>
