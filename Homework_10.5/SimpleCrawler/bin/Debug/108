<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta name="description" content="在上一篇文章中我们已经创建了实体类，在这一篇文章中，我将创建一个新的控制器类——BookController，使用BookController对Books表中的数据进行CURD操作的方法，并使用视图模" />
    <meta property="og:description" content="在上一篇文章中我们已经创建了实体类，在这一篇文章中，我将创建一个新的控制器类——BookController，使用BookController对Books表中的数据进行CURD操作的方法，并使用视图模" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>学习ASP.NET MVC(五)——我的第一个ASP.NET MVC CURD页面 - DotNet菜园 - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=kXxbcm7tkkASG2_xwyD6Kw4CzHe0bT3mi0jyCb8YspQ" />
    <link id="MainCss" rel="stylesheet" href="/skins/classicblue/bundle-classicblue.min.css?v=C_xOBodTdu7qViYoEOWb5uyE0XIl-SuwRkgFEwSDOCc" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/classicblue/bundle-classicblue-mobile.min.css?v=arJ4BmwdBcUZrSduKjIvQKPiliQ99OBUW7yasPqJtdY" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/chillsrc/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/chillsrc/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/chillsrc/wlwmanifest.xml" />
    <script>
        var currentBlogId = 13897;
        var currentBlogApp = 'chillsrc';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'ClassicBlue';
        var visitorUserId = '';
    </script>
        <script>
            var currentPostDateAdded = '2014-06-23 09:54';
        </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=fLUEwRea4WeqlJe_CLnNunLQZl_ViJFLgKpcNDuKptI"></script>
    
    
    
</head>
<body>
    <a name="top"></a>
    <div id="top_nav" class="navbar navbar-custom">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding">
                    <a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a>
                </li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=oS4PkibyMjZ9rGD5XAcLt99uW_s76Javy2up4dbnZNY" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" onclick="logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signin/?returnUrl=https://www.cnblogs.com/">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/chillsrc/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/chillsrc/">DotNet菜园</a>
</h1>
<h2>
专注所以专业,专业所以专注
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/chillsrc/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/DotNet%E8%8F%9C%E5%9B%AD">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/chillsrc/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
276&nbsp; </span>
<span id="stats_article_count">文章 - 
32&nbsp; </span>
<span id="stats-comment_count">评论 - 
836</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chillsrc/p/3805067.html">
    <span>学习ASP.NET MVC(五)——我的第一个ASP.NET MVC CURD页面</span>
    


</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
    <div id="cnblogs_post_description" style="display: none">
        在上一篇文章中我们已经创建了实体类，在这一篇文章中，我将创建一个新的控制器类——BookController，使用BookController对Books表中的数据进行CURD操作的方法，并使用视图模板在浏览器中显示所查询到的书籍数据信息。
    </div>
<div id="cnblogs_post_body" class="blogpost-body">
    <p class="p0"><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在上一篇文章中我们已经创建了实体类，在这一篇文章中，我将创建一个新的控制器类——BookController，使用BookController对Books表中的数据进行CURD操作的方法，并使用视图模板在浏览器中显示所查询到的书籍数据信息。&nbsp;</span></p>
<p class="p0"><br><strong><span style="font-size: 16px">一、添加控制器类</span></strong></p>
<p class="p0"><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在<span style="font-family: Calibri">Visual&nbsp;Studio&nbsp;</span><span style="font-family: 宋体">的“解决方案资源管理器”中</span>右键单击Controllers文件夹，并创建一个新的BookController控制器类。如下图。</span></p>
<p class="p0"><span style="font-size: 16px">&nbsp;<img src="https://images0.cnblogs.com/i/10343/201406/232146414869268.png" alt=""></span></p>
<p class="p19"><span style="font-size: 16px">　　Visual&nbsp;Studio&nbsp;<span style="font-family: 宋体">会弹出一个“添加控制器”对话框（如下图）。</span></span></p>
<p class="p19"><span style="font-size: 16px"><span style="font-family: 宋体"><img src="https://images0.cnblogs.com/i/10343/201406/232147073773946.png" alt=""></span></span></p>
<p class="p19">&nbsp;</p>
<p class="p19">&nbsp; <span style="font-size: 16px"><span style="font-family: 宋体">在对话框中填写如下数据</span></span></p>
<p class="p19"><span style="font-size: 16px">•控制器名称：BookController。&nbsp;（可以进行修改，如下图是默认的Default1Controller，修改为BookController。）&nbsp;</span><br><span style="font-size: 16px">•模板：包含读/写操作和视图MVC控制器（使用Entity&nbsp;Framework）。&nbsp;</span><br><span style="font-size: 16px">•模型类：Book（MvcApplication1.Models）。&nbsp;</span><br><span style="font-size: 16px">•数据上下文类：BookDBContext（MvcApplication1.Models）。&nbsp;</span><br><span style="font-size: 16px">•视图：Razor（CSHTML）。&nbsp;（默认设置。）</span></p>
<p class="p0"><span style="font-size: 16px">&nbsp;</span></p>
<p class="p0"><span style="font-size: 16px">&nbsp;在填写完以上数据之后，用鼠标左键单击“添加”按钮。Visual&nbsp;Studio会快速创建下列文件和文件夹：</span><br><span style="font-size: 16px">1)在项目中的Controllers文件夹中创建一个BookController.cs文件。如下图中的1处。</span><br><span style="font-size: 16px">2)在项目的Views文件夹中创建一个Book文件夹。同时在Book文件夹中创建以下文件&nbsp;Create.cshtml&nbsp;，&nbsp;Delete.cshtml&nbsp;，&nbsp;Details.cshtml&nbsp;，&nbsp;Edit.cshtml和Index.cshtml。如下图中的2处。</span></p>
<p class="p0"><img src="https://images0.cnblogs.com/i/10343/201406/232148072834547.png" alt=""><br><span style="font-size: 16px">3)&nbsp;ASP.NET&nbsp;MVC&nbsp;4会自动创建对于数据库的CRUD（创建，读取，更新和删除）操作方法和视图。由Visual&nbsp;Studio自动创建CRUD操作方法和视图被称为基架。这样我们不需要修改什么，就有了一个全功能的Web应用程序，可以让你创建，查询，修改和删除书籍数据。</span><br><span style="font-size: 16px">4）在Visual&nbsp;Studio中运行该应用程序。，浏览器请求http://localhost:36878/Book被路由到书籍控制器的默认Index操作方法。换句话说，浏览器请求http://localhost:&nbsp;36878/Book实际与请求http://localhost:&nbsp;36878/Book/Index是一样的。浏览器中却是什么数据也没有显示，因为现在数据库中的Books表是一张空表，没有任何数据。如下图。</span></p>
<p class="p0"><span style="font-size: 16px">&nbsp;<img src="https://images0.cnblogs.com/i/10343/201406/232148196427656.png" alt=""></span></p>
<p class="p0"><span style="font-size: 16px">&nbsp;</span></p>
<p class="p0"><span style="font-size: 16px">&nbsp;</span></p>
<p class="p0"><strong><span style="font-size: 16px">二、创建书籍&nbsp;</span></strong><br><span style="font-size: 16px">1)&nbsp;用鼠标左键，点击“Create&nbsp;New”链接，浏览器会导航到新建页面，在此页面中输入有关书籍的一些数据，然后点击“Create”按钮。如下图1，与图2.</span></p>
<p class="p0"><span style="font-size: 16px">&nbsp;<img src="https://images0.cnblogs.com/i/10343/201406/232148397053885.png" alt=""></span></p>
<p class="p0" style="text-align: center"><span style="font-size: 16px">图1</span></p>
<p class="p0"><span style="font-size: 16px">&nbsp;<img src="https://images0.cnblogs.com/i/10343/201406/232148570645855.png" alt=""></span></p>
<p class="p0" style="text-align: center"><span style="font-size: 16px">图2</span></p>
<p class="p0"><span style="font-size: 16px">2)&nbsp;<span style="font-family: 宋体">当使用鼠标左键点击“</span><span style="font-family: Calibri">Create</span><span style="font-family: 宋体">”按钮时，浏览器会把表单数据发送到服务器上，服务器程序会把刚才填写的书籍信息保存到数据库中。然后浏览器会自动重定向到书籍列表的网址（</span><a href="http://localhost:36878/book">http://localhost:36878/book</a>），在那个页面就可以看到新创建的书籍数据，已经存在了。如下图。</span></p>
<p class="p0"><span style="font-size: 16px">&nbsp;<img src="https://images0.cnblogs.com/i/10343/201406/232149130804381.png" alt=""></span></p>
<p class="p0"><span style="font-size: 18px"><strong>三、编辑书籍</strong></span></p>
<p class="p0"><span style="font-size: 16px">对刚才创建的书籍数据进行修改。在一条书籍记录的最后面有三个链接，分别是<span style="font-family: Times New Roman">Edit</span><span style="font-family: 宋体">、</span><span style="font-family: Times New Roman">Details</span><span style="font-family: 宋体">、</span><span style="font-family: Times New Roman">Deltet</span><span style="font-family: 宋体">。&nbsp;如下图。</span></span><span style="font-size: 16px"><img src="https://images0.cnblogs.com/i/10343/201406/232149280179178.png" alt=""></span></p>
<p class="p19"><span style="font-size: 16px">1)&nbsp;用鼠标左键点击“Edit”链接。会浏览器会自动转到编辑界面。在编辑页面中修改完数据，点击“Save”按钮，即把修改的数据保存到数据库。如下图。</span></p>
<p class="p0"><span style="font-size: 16px">&nbsp;</span></p>
<p class="p0"><span style="font-size: 16px">&nbsp;</span><span style="font-size: 16px"><img src="https://images0.cnblogs.com/i/10343/201406/232150110029811.png" alt=""></span></p>
<p class="p0"><span style="font-size: 16px">&nbsp;</span></p>
<p class="p19"><span style="font-size: 16px">2)&nbsp;2用鼠标左键点击“Details”链接。会浏览器会自动转到详细信息界面。如下图。图1，图2。</span></p>
<p class="p0"><span style="font-size: 16px">&nbsp;<img src="https://images0.cnblogs.com/i/10343/201406/232151025177449.png" alt=""></span></p>
<p class="p0"><span style="font-size: 16px">&nbsp;</span></p>
<p class="p0"><span style="font-size: 16px">图1</span></p>
<p class="p0"><span style="font-size: 16px">&nbsp;<img src="https://images0.cnblogs.com/i/10343/201406/232151103926555.png" alt=""></span></p>
<p class="p0"><span style="font-size: 16px">图2</span></p>
<p class="p0"><span style="font-size: 16px">&nbsp;</span></p>
<p class="p0"><span style="font-size: 18px"><strong>四、对ASP.NET&nbsp;MVC自动生成代码的解释</strong></span><br><span style="font-size: 16px">在Visual&nbsp;Studio的“解决方案资料管理器”中打开Controllers\&nbsp;BookController.cs文件，查看由Visual&nbsp;Studio自动生成的Index方法。代码如下所示。</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> BookController : Controller

{

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> BookDBContext db = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> BookDBContext();

    </span><span style="color: rgba(0, 128, 0, 1)">//</span>

    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> GET: </span><span style="color: rgba(0, 128, 0, 1)">//
</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> ActionResult Index()

    {

       </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> View(db.Books.ToList());

 }

}
</span></pre>
</div>
<p>&nbsp;</p>
<p class="p0"><span style="font-size: 16px"><span style="color: rgba(0, 0, 0, 1)">注意这一行代码。</span></span></p>
<p class="p0"><span style="font-size: 16px"><span style="color: rgba(0, 0, 0, 1)"> <span style="color: rgba(0, 0, 255, 1)">private BookDBContext db = <span style="color: rgba(0, 0, 255, 1)">new BookDBContext();</span></span></span></span></p>
<p class="p0"><span style="font-size: 16px"> 这行代码是实例化一个BookDBContext类对象。如前面所述。您可以使用数据库中的<span style="font-family: Calibri">Books</span><span style="font-family: 宋体">表中的数据进行查询，修改和删除。</span></span></p>
<p class="p0"><span style="font-size: 16px">当浏览器发出一个请求到<span style="font-family: Calibri">Book</span><span style="font-family: 宋体">控制器之后，由控制器中的默认方法（</span><span style="font-family: Calibri">Index</span><span style="font-family: 宋体">）返回了数据库中</span><span style="font-family: Calibri">Books</span><span style="font-family: 宋体">表中数据的所有行，并将结果传递给</span><span style="font-family: Calibri">Index</span><span style="font-family: 宋体">视图，然后呈现在浏览器，让用户看到。</span></span></p>
<p class="p0"><br><span style="font-size: 18px"><strong>五、强类型对象和@model关键字</strong></span><br><span style="font-size: 16px">在本文的上面部分，讲了如何通过一个控制器传递数据或对象给使用<span style="font-family: Calibri">ViewBag</span><span style="font-family: 宋体">对象的视图模板。该</span><span style="font-family: Calibri">ViewBag</span><span style="font-family: 宋体">是一个动态对象，它提供了将信息传递到一个视图，在后期可以进行方便绑定的方式。</span></span><br><span style="font-size: 16px">ASP.NET&nbsp;MVC<span style="font-family: 宋体">还提供了强类型数据或将对象实例传递给视图模板的能力。这种强类型的对象能够更方便</span><span style="font-family: Calibri">Visual&nbsp;Studio</span><span style="font-family: 宋体">在进行代码编译时进行代码检查，并在</span><span style="font-family: Calibri">Visual&nbsp;Studio</span><span style="font-family: 宋体">编辑器中有更丰富的智能感知。在</span><span style="font-family: Calibri">Visual&nbsp;Studio</span><span style="font-family: 宋体">的基架机制就是使用这种方法与</span><span style="font-family: Calibri">BookController</span><span style="font-family: 宋体">类和视图模板。</span></span><br><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp;在<span style="font-family: Calibri">Controllers\&nbsp;BookController.cs</span><span style="font-family: 宋体">文件中查看自动生成的</span><span style="font-family: Calibri">Details</span><span style="font-family: 宋体">方法。</span><span style="font-family: Calibri">Details</span><span style="font-family: 宋体">方法的代码如下所示。</span></span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span> ActionResult Details(<span style="color: rgba(0, 0, 255, 1)">int</span> id = <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)

{

      Book book </span>=<span style="color: rgba(0, 0, 0, 1)"> db.Books.Find(id);

            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (book == <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)

            {

                </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> HttpNotFound();

            }

            </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> View(book);

 }</span></pre>
</div>
<p>&nbsp;</p>
<p class="p0"><span style="font-size: 16px">如果想找到一本书籍，那么<span style="font-family: Calibri">Book</span><span style="font-family: 宋体">实体的一个实例会传递给</span><span style="font-family: Calibri">Details</span><span style="font-family: 宋体">视图。请查看</span><span style="font-family: Calibri">Views\Book\Details.cshtml</span><span style="font-family: 宋体">文件。&nbsp;</span></span><br><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp;通过包括在视图模板文件的顶部<span style="font-family: Calibri">@model</span><span style="font-family: 宋体">语句，你可以指定视图期望得到的对象类型。当您创建</span><span style="font-family: Calibri">BookController</span><span style="font-family: 宋体">控制器类时，</span><span style="font-family: Calibri">Visual&nbsp;Studio</span><span style="font-family: 宋体">会自动包含在</span><span style="font-family: Calibri">Details.cshtml</span><span style="font-family: 宋体">文件的顶部以下</span><span style="font-family: Calibri">@model</span><span style="font-family: 宋体">的语句：</span></span></p>
<p class="p0"><span style="font-size: 16px">@model&nbsp;MvcApplication1.Models.Book</span></p>
<p class="p0"><span style="font-size: 16px">&nbsp;</span></p>
<p class="p0"><span style="font-size: 16px">这个@&nbsp;model指令允许你通过强类型访问控制器传递给视图的Model对象的Book类。例如，在Details.cshtml模板，代码通过每本书籍领域的DisplayNameFor和DisplayFor&nbsp;HTML辅助与强类型的Model对象。创建和编辑方法和视图模板也能通过书籍的模型对象进行访问。&nbsp;</span><br><span style="font-size: 16px">&nbsp;&nbsp;&nbsp;&nbsp;查看Index.cshtml视图模板，并在BookController.cs文件找到Index方法。请注意代码是如何创建一个List对象时，使用View进行了封装，通过这个封装最终把书籍列表从控制器传给了视图。代码如下。</span></p>
<p class="p0"><span style="font-size: 16px">&nbsp;</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> ActionResult Index()

    {

       </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> View(db.Books.ToList());

 }</span></pre>
</div>
<p>&nbsp;</p>
<p class="p0"><span style="font-size: 16px">当您创建BookController控制器时，Visual&nbsp;Studio会自动在Index.cshtml文件的顶部添加以下@model的语句：</span></p>
<p class="p0"><span style="font-size: 16px">@model&nbsp;IEnumerable&lt;MvcApplication1.Models.Book&gt;</span></p>
<p class="p0"><span style="font-size: 16px">这个<span style="font-family: Times New Roman">@&nbsp;</span>model<span style="font-family: 宋体">指令</span>允许您访问控制器传递给视图通过使用的强类型的<span style="font-family: Times New Roman">Model</span><span style="font-family: 宋体">对象的书籍名单。例如，在</span><span style="font-family: Times New Roman">Index.cshtml</span><span style="font-family: 宋体">模板，如下面的代码在循环中通过强类型访问</span><span style="font-family: Times New Roman">Model</span><span style="font-family: 宋体">对象。代码如下。</span></span></p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">@foreach (var item in Model) {

    </span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">tr</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>

        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">td</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 0, 1)">

            @Html.DisplayFor(modelItem =&gt; item.Category)

        </span><span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">td</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>

        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">td</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 0, 1)">

            @Html.DisplayFor(modelItem =&gt; item.Name)

        </span><span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">td</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>

        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">td</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 0, 1)">

            @Html.DisplayFor(modelItem =&gt; item.Numberofcopies)

        </span><span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">td</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>

        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">td</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 0, 1)">

            @Html.DisplayFor(modelItem =&gt; item.AuthorID)

        </span><span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">td</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>

        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">td</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 0, 1)">

            @Html.DisplayFor(modelItem =&gt; item.Price)

        </span><span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">td</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>

        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">td</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 0, 1)">

            @Html.DisplayFor(modelItem =&gt; item.PublishDate)

        </span><span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">td</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>

           <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">td</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 0, 1)">

            @Html.DisplayFor(model =&gt; item.Rating)

        </span><span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">td</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>

        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">td</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 0, 1)">

            @Html.ActionLink("Edit", "Edit", new { id=item.BookID }) |

            @Html.ActionLink("Details", "Details", new { id=item.BookID }) |

            @Html.ActionLink("Delete", "Delete", new { id=item.BookID })

        </span><span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">td</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>

    <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">tr</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 0, 1)">

}</span></pre>
</div>
<p>&nbsp;</p>
<p class="p0"><span style="font-size: 16px">因为模型对象是强类型（如<span style="font-family: Times New Roman">IEnumerable&nbsp;&lt;</span>Book&gt;<span style="font-family: 宋体">），</span>则在循环中每个item对象的类型为Book。除了其他好处，这意味着你会得到编译时会进行代码检查功能和完整的<span style="font-family: Times New Roman">IntelliSense</span><span style="font-family: 宋体">支持</span>。如下图。</span></p>
<p class="p0"><span style="font-size: 16px">&nbsp;<img src="https://images0.cnblogs.com/i/10343/201406/232151341895158.png" alt=""></span></p>
<p class="p0"><span style="font-size: 16px">&nbsp;</span></p>
<p class="p0"><span style="font-size: 16px">运行程序，然后你会看到如下图的数据。</span></p>
<p class="p0"><span style="font-size: 16px">&nbsp;<img src="https://images0.cnblogs.com/i/10343/201406/232151484864126.png" alt=""></span></p>
<p class="p0"><span style="font-size: 16px">&nbsp;</span></p>
<p class="p0"><span style="font-size: 16px">&nbsp;</span></p>
<p class="p0"><span style="font-size: 16px">&nbsp;</span></p>
<p class="p0"><span style="font-size: 16px">小记：最近工作有点忙，所以更新的有点迟了。尽量会写完的。<br></span></p>
<p class="p0"><span style="font-size: 16px">&nbsp;</span></p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2014-06-23 21:54</span>&nbsp;
<a href="https://www.cnblogs.com/chillsrc/">DotNet菜园</a>&nbsp;
阅读(<span id="post_view_count">10404</span>)&nbsp;
评论(<span id="post_comment_count">17</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=3805067" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(3805067);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 13897, cb_blogApp = 'chillsrc', cb_blogUserGuid = 'c642360b-63cf-dd11-9e4d-001cf0cd104b';
    var cb_entryId = 3805067, cb_entryCreatedDate = '2014-06-23 21:54', cb_postType = 1;
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id='div-gpt-ad-1592366332455-0' style='width: 468px; height: 60px;'></div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverT2();
        deliverC1C2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 DotNet菜园
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>
