<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta name="description" content="一、简介 源码地址:https://gitee.com/xiaocheng0902/my-cloud.git 1，定义 Hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多" />
    <meta property="og:description" content="一、简介 源码地址:https://gitee.com/xiaocheng0902/my-cloud.git 1，定义 Hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>SpringCould中的Hystrix - MXC肖某某 - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=kXxbcm7tkkASG2_xwyD6Kw4CzHe0bT3mi0jyCb8YspQ" />
    <link id="MainCss" rel="stylesheet" href="/skins/coffee/bundle-coffee.min.css?v=F9ODK0b_BexrGFuzwObB8A2Gx3VnPgTALBeh3BNdKdg" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/bbgs-xc/custom.css?v=b&#x2B;U8xXNefd0Tn/LN8m6LpxpNcuo=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/coffee/bundle-coffee-mobile.min.css?v=_A34W8fnMJT0tcRq18x5CRz6GYA4gZvedLXGAkdf2Ms" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/bbgs-xc/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/bbgs-xc/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/bbgs-xc/wlwmanifest.xml" />
    <script>
        var currentBlogId = 433655;
        var currentBlogApp = 'bbgs-xc';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'coffee';
        var visitorUserId = '';
    </script>
        <script>
            var currentPostDateAdded = '2020-10-11 09:03';
        </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=fLUEwRea4WeqlJe_CLnNunLQZl_ViJFLgKpcNDuKptI"></script>
    
    
    
</head>
<body>
    <a name="top"></a>
    <div id="top_nav" class="navbar navbar-custom">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding">
                    <a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a>
                </li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=oS4PkibyMjZ9rGD5XAcLt99uW_s76Javy2up4dbnZNY" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" onclick="logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signin/?returnUrl=https://www.cnblogs.com/">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    <div id="page_begin_html">
        <link  type="text/css" rel="stylesheet" href="https://files.cnblogs.com/files/miangao/maodian.css">
<script src="https://files.cnblogs.com/files/miangao/maodian.js" defer></script>
<script src="https://files.cnblogs.com/files/miangao/bootstrap.min.js" defer></script>

    </div>
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a href="https://www.cnblogs.com/bbgs-xc/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/bbgs-xc/">MXC</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="navigator">
			
<ul id="navList">
	<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
	<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/bbgs-xc/">
首页</a>
</li>
	<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
	<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/MXC%E8%82%96%E6%9F%90%E6%9F%90">
联系</a></li>
	<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
	<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/bbgs-xc/rss/">
订阅</a>
	
<a id="blog_nav_rss_image" href="https://www.cnblogs.com/bbgs-xc/rss/">
    <img src="/skins/coffee/images/xml.gif" alt="订阅" />
</a></li>
</ul>



			<div class="blogStats">
				
				<!--done-->
随笔- 
71&nbsp;
文章- 
0&nbsp;
评论- 
6&nbsp;



				
			</div><!--end: blogStats -->
		</div><!--end: navigator 博客导航栏 -->
		<div id="post_detail">
<!--done-->
<div id="topics">
	<div class="post">
		<h1 class = "postTitle">
			
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bbgs-xc/p/13740464.html">
    <span>SpringCould中的Hystrix</span>
    


</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			
<div id="cnblogs_post_body" class="blogpost-body">
    <h2><span style="font-family: 宋体">一、简介</span></h2>
<p><span style="font-family: 宋体">源码地址:<a href="https://gitee.com/xiaocheng0902/my-cloud.git" target="_blank">https://gitee.com/xiaocheng0902/my-cloud.git</a></span></p>
<h3><span style="font-family: 宋体">1，定义</span></h3>
<p><span style="font-family: 宋体">　　Hystrix是一个用于处理分布式系统的<span style="color: rgba(0, 0, 255, 1)">延迟和容错</span>的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等。Hystrix能够<span style="color: rgba(0, 0, 255, 1)">保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障</span>，以提高分布式系统的弹性。</span></p>
<p><span style="font-family: 宋体">　　"断路器"本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似<span style="color: rgba(0, 0, 255, 1)">熔断保险丝</span>），向调用方返回一个符合预期的、可处理的<span style="color: rgba(0, 0, 255, 1)">备选响应</span>（<span style="color: rgba(0, 0, 255, 1)">FallBack</span>），而不是长时间的等待或者抛出调用方无法处理的异常，这样就保证了服务调用方的线程不会被长时间的、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</span></p>
<h3><span style="font-family: 宋体">2，作用</span></h3>
<h4><span style="font-family: 宋体">　a)服务降级</span></h4>
<p><span style="font-family: 宋体">　　服务降级是从整个系统的负荷情况出发和考虑的，对某些负荷会比较高的情况，为了<span style="color: rgba(0, 0, 255, 1)">预防某些功能（业务场景）出现负荷过载或者响应慢的情况</span>，在其内部暂时舍弃对一些非核心的接口和数据的请求，而直接返回一个提前准备好的fallback（退路）错误处理信息。这样，虽然提供的是一个有损的服务，但却保证了整个系统的稳定性和可用性</span></p>
<h4><span style="font-family: 宋体">　b)服务熔断</span></h4>
<p><span style="font-family: 宋体">　　服务熔断的作用类似于我们家用的保险丝，当某服务出现不可用或响应超时的情况时，为了防止整个系统出现雪崩，暂时停止对该服务的调用。</span></p>
<h4><span style="font-family: 宋体">　c)熔断vs降级</span></h4>
<h3><span style="font-family: 宋体">3，使用依赖</span></h3>
<div class="cnblogs_code">
<pre>&lt;!--新增hystrix--&gt;
&lt;dependency&gt;
   &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
   &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;
   &lt;version&gt;<span style="color: rgba(128, 0, 128, 1)">2.2</span>.<span style="color: rgba(128, 0, 128, 1)">1</span>.RELEASE&lt;/version&gt;
&lt;/dependency&gt;</pre>
</div>
<h2><span style="font-family: 宋体">二、服务降级</span></h2>
<h3><span style="font-family: 宋体">1，服务提供者(自身)</span></h3>
<p><span style="font-family: 宋体">对应源码:<a href="https://gitee.com/xiaocheng0902/my-cloud/tree/master/cloud-hystrix/cloud-provider-hystrix-payment8001" target="_blank">cloud-provider-hystrix-payment8001</a></span></p>
<p><span style="font-family: 宋体">　　在<strong>主启动类Application</strong>上注解</span></p>
<div class="cnblogs_code">
<pre>@EnableCircuitBreaker</pre>
</div>
<p><span style="font-family: 宋体">　　在<strong>service</strong>的方法中加入</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//主方法</span>
@HystrixCommand(fallbackMethod = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">paymentInfo_TimeOutHandler</span><span style="color: rgba(128, 0, 0, 1)">"</span>,commandProperties = { <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">出現超時,异常调用fallbackMethod方法</span>
        @HystrixProperty(name = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">execution.isolation.thread.timeoutInMilliseconds</span><span style="color: rgba(128, 0, 0, 1)">"</span>,value = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">3000</span><span style="color: rgba(128, 0, 0, 1)">"</span>)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">3秒钟以内就是正常的业务逻辑</span>
<span style="color: rgba(0, 0, 0, 1)">})
</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> String paymentInfo_TimeOut(Integer id){
    </span><span style="color: rgba(0, 0, 255, 1)">int</span> timeNumber = <span style="color: rgba(128, 0, 128, 1)">5</span>;  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">1 的时候为正常执行当前方法
</span><span style="color: rgba(0, 128, 0, 1)">    //</span><span style="color: rgba(0, 128, 0, 1)">throw new RuntimeException();  </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">异常情况会直接跳过进入paymentInfo_TimeOutHandler</span>
    <span style="color: rgba(0, 0, 255, 1)">try</span> { TimeUnit.SECONDS.sleep(timeNumber); }<span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (Exception e) {e.printStackTrace();}
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">线程池：</span><span style="color: rgba(128, 0, 0, 1)">"</span>+Thread.currentThread().getName()+<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">   paymentInfo_TimeOut,id：  </span><span style="color: rgba(128, 0, 0, 1)">"</span>+id+<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\t</span><span style="color: rgba(128, 0, 0, 1)">"</span>+<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">呜呜呜</span><span style="color: rgba(128, 0, 0, 1)">"</span>+<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)"> 耗时(秒)</span><span style="color: rgba(128, 0, 0, 1)">"</span>+<span style="color: rgba(0, 0, 0, 1)">timeNumber;
}

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">备选方法</span>
<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> String paymentInfo_TimeOutHandler(Integer id){
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">线程池：</span><span style="color: rgba(128, 0, 0, 1)">"</span>+Thread.currentThread().getName()+<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">   系统繁忙, 请稍候再试  ,id：  </span><span style="color: rgba(128, 0, 0, 1)">"</span>+id+<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\t</span><span style="color: rgba(128, 0, 0, 1)">"</span>+<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">哭了哇呜</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
}</span></pre>
</div>
<h3><span style="font-family: 宋体">2，服务调用者(fegin消费者)</span></h3>
<p><span style="font-family: 宋体">对应源码:<a href="https://gitee.com/xiaocheng0902/my-cloud/tree/master/cloud-hystrix/cloud-consumer-feign-hystrix-order80" target="_blank">cloud-consumer-feign-hystrix-order80</a></span></p>
<p><span style="font-family: 宋体">　　<strong>yaml文件</strong>中添加配置</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">feign:
  hystrix:
    enabled: </span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)"> #如果处理自身的容错就开启。开启方式与生产端不一样。
  client:
    config:
      </span><span style="color: rgba(0, 0, 255, 1)">default</span><span style="color: rgba(0, 0, 0, 1)">:
        connectTimeout: </span><span style="color: rgba(128, 0, 128, 1)">5000</span><span style="color: rgba(0, 0, 0, 1)"> # feign 的超时设置
        readTimeout: </span><span style="color: rgba(128, 0, 128, 1)">5000</span><span style="color: rgba(0, 0, 0, 1)"> #同时配置一下feign的读取 超时
#超时时间配置，此处全局超时配置时间大于@HystrixProperty配置时间后，@HystrixProperty注解中的超时才生效
hystrix:
  command:
    </span><span style="color: rgba(0, 0, 255, 1)">default</span><span style="color: rgba(0, 0, 0, 1)">:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: </span><span style="color: rgba(128, 0, 128, 1)">10000</span></pre>
</div>
<p><span style="font-family: 宋体">　　<strong>主启动类Application</strong>上加上注解</span></p>
<div class="cnblogs_code">
<pre>@EnableHystrix</pre>
</div>
<p><span style="font-family: 宋体">　　业务类<strong>controller</strong>中加入</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">主方法</span>
@GetMapping(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/consumer/payment/hystrix/timeout/{id}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
@HystrixCommand(fallbackMethod </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">paymentTimeOutFallbackMethod</span><span style="color: rgba(128, 0, 0, 1)">"</span>,commandProperties =<span style="color: rgba(0, 0, 0, 1)"> {
        @HystrixProperty(name</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">execution.isolation.thread.timeoutInMilliseconds</span><span style="color: rgba(128, 0, 0, 1)">"</span>, value=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">1500</span><span style="color: rgba(128, 0, 0, 1)">"</span>)<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">1.5秒钟以内就是正常的业务逻辑</span>
<span style="color: rgba(0, 0, 0, 1)">})
</span><span style="color: rgba(0, 0, 255, 1)">public</span> String paymentInfo_TimeOut(@PathVariable(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">id</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">) Integer id){
    String result </span>=<span style="color: rgba(0, 0, 0, 1)"> paymentHystrixService.paymentInfo_TimeOut(id);
    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> result;
}

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">备用方法</span>
<span style="color: rgba(0, 0, 255, 1)">public</span> String paymentTimeOutFallbackMethod(@PathVariable(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">id</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">) Integer id){
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">我是消费者80，对付支付系统繁忙请10秒钟后再试或者自己运行出错请检查自己,(┬＿┬)</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
}</span></pre>
</div>
<h3><span style="font-family: 宋体">3，全局服务降级(feign消费端)</span></h3>
<p><span style="font-family: 宋体">对应源码:<a href="https://gitee.com/xiaocheng0902/my-cloud/tree/master/cloud-hystrix/cloud-consumer-feign-hystrix-order80" target="_blank">cloud-consumer-feign-hystrix-order80</a></span></p>
<p><span style="font-family: 宋体">　　解决主方法一个备用方法的代码冗余。(源码同上)</span></p>
<p><span style="font-family: 宋体">　　<strong>yaml文件</strong>中添加配置</span></p>
<div class="cnblogs_code">
<pre><span>feign:
  hystrix:
    enabled: true<span> #如果处理自身的容错就开启。开启方式与生产端不一样。
  client:
    config:
      default<span>:
        connectTimeout: 5000<span> # feign 的超时设置
        readTimeout: 5000<span> #同时配置一下feign的读取 超时
#超时时间配置，此处全局超时配置时间大于@HystrixProperty配置时间后，@HystrixProperty注解中的超时才生效
hystrix:
  command:
    default<span>:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 10000</span></span></span></span></span></span></pre>
</div>
<p><span style="font-family: 宋体">　　<strong>主启动类Application</strong>上加上注解</span></p>
<div class="cnblogs_code">
<pre>@EnableHystrix</pre>
</div>
<p><span style="font-family: 宋体">　　业务类<strong>controller中编码</strong><br></span></p>
<div class="cnblogs_code">
<pre>@RestController<br>@DefaultProperties(defaultFallback=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">paymentGobalFallbackMethod</span><span style="color: rgba(128, 0, 0, 1)">"</span>, commandProperties =<span style="color: rgba(0, 0, 0, 1)"> {
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">如果commandProperties没有对应的内容就会走默认的HystrixCommandProperties中的配置</span>
        @HystrixProperty(name = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">execution.isolation.thread.timeoutInMilliseconds</span><span style="color: rgba(128, 0, 0, 1)">"</span>, value = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">1500</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)})
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> OrderHystrixController {<br>
    @Resource
    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> PaymentHystrixService paymentHystrixService;<br>
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">主方法</span>
    @GetMapping(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/consumer/payment/hystrix/timeout/{id}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
    @HystrixCommand </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">标识走全局的备用策略</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span> String paymentInfo_TimeOut(@PathVariable(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">id</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">) Integer id) {
        String result </span>=<span style="color: rgba(0, 0, 0, 1)"> paymentHystrixService.paymentInfo_TimeOut(id);
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> result;
    }

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">全局备用方法</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> String paymentGobalFallbackMethod() {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Gobal全局备选方法，对象系统繁忙或者已经down机了，请稍后再试</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
    }

}</span></pre>
</div>
<h3><span style="font-family: 宋体">4，降级分离(feign消费端)</span></h3>
<p><span style="font-family: 宋体">对应源码:<a href="https://gitee.com/xiaocheng0902/my-cloud/tree/master/cloud-hystrix/cloud-consumer-feign-hystrix-order80" target="_blank">cloud-consumer-feign-hystrix-order80</a></span></p>
<p><span style="font-family: 宋体">　　<strong>yaml文件</strong>配置</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">feign:
  hystrix:
    enabled: </span><span style="color: rgba(0, 0, 255, 1)">true</span> #如果处理自身的容错就开启。开启方式与生产端不一样</pre>
</div>
<p><span style="font-family: 宋体">　　feign调用的接口</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">@Component
@FeignClient(value </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">CLOUD-PROVIDER-HYSTRIX-PAYMENT</span><span style="color: rgba(128, 0, 0, 1)">"</span>,fallback = PaymentHystrixFallbackServiceImpl.<span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)">) //配置对应的fallback的类
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">interface</span><span style="color: rgba(0, 0, 0, 1)"> PaymentHystrixFallbackService {
    @GetMapping(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/payment/hystrix/ok/{id}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> String paymentInfo_OK(@PathVariable(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">id</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">) Integer id);

    @GetMapping(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/payment/hystrix/timeout/{id}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> String paymentInfo_TimeOut(@PathVariable(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">id</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">) Integer id);
}</span></pre>
</div>
<p><span style="font-family: 宋体">　　feign调用接口的实现类</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">*
 * fallback类，用于承载整个类的降级处理
 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
@Component
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> PaymentHystrixFallbackServiceImpl implements PaymentHystrixFallbackService {
    @Override
    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> String paymentInfo_OK(Integer id) {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">-----PaymentFallbackService fall back-paymentInfo_OK , (┬＿┬)</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
    }

    @Override
    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> String paymentInfo_TimeOut(Integer id) {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">-----PaymentFallbackService fall back-paymentInfo_TimeOut , (┬＿┬)</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
    }
}</span></pre>
</div>
<p><span style="font-family: 宋体">　　controller中正常调用即可</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">@Slf4j
@RestController
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> OrderHystrixControllerFallbackClass {

    @Resource
    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> PaymentHystrixFallbackService paymentHystrixFallbackService;

    @Value(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">${server.port}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> String serverPort;

    @GetMapping(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/consumer_all/payment/hystrix/ok/{id}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> String paymentInfo_OK(@PathVariable(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">id</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">) Integer id) {
        String result </span>=<span style="color: rgba(0, 0, 0, 1)"> paymentHystrixFallbackService.paymentInfo_OK(id);
        log.info(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">*******result:</span><span style="color: rgba(128, 0, 0, 1)">"</span> +<span style="color: rgba(0, 0, 0, 1)"> result);
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> result;
    }

    @GetMapping(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/consumer_all/payment/hystrix/timeout/{id}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> String paymentInfo_TimeOut(@PathVariable(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">id</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">) Integer id) {
        String result </span>=<span style="color: rgba(0, 0, 0, 1)"> paymentHystrixFallbackService.paymentInfo_TimeOut(id);
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> result;
    }
}</span></pre>
</div>
<h2><span style="font-family: 宋体">三、服务熔断</span></h2>
<p><span style="font-family: 宋体">　　熔断机制是应对雪崩效应的一种微服务链路保护机制。当扇出链路的<span style="color: rgba(51, 102, 255, 1)">某个微服务出错</span>不可用或者响应时间太长时，会进行服务的<span style="color: rgba(51, 102, 255, 1)">降级</span>，<span style="color: rgba(51, 102, 255, 1)">进而熔断该节点微服务的调用</span>，快速返回错误的响应信息。<span style="color: rgba(51, 102, 255, 1)">当检测到该节点微服务调用响应正常后，恢复调用链路</span>。</span></p>
<h3><span style="font-family: 宋体">1，实例(提供端)</span></h3>
<p><span style="font-family: 宋体">源码:<a href="https://gitee.com/xiaocheng0902/my-cloud/tree/master/cloud-hystrix/cloud-provider-hystrix-payment8001" target="_blank">cloud-provider-hystrix-payment8001</a></span></p>
<p><strong><span style="font-family: 宋体">　　启动类</span></strong></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">@EnableCircuitBreaker //启动熔断
@EnableEurekaClient
@SpringBootApplication
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span> CloudHystrixPaymentApplicaiton8001{...}</pre>
</div>
<p><strong><span style="font-family: 宋体">　　service</span></strong></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">@Service
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> PaymentCircutBreakerService {
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">服务熔断</span>
    @HystrixCommand(fallbackMethod = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">paymentCircuitBreaker_fallback</span><span style="color: rgba(128, 0, 0, 1)">"</span>,commandProperties =<span style="color: rgba(0, 0, 0, 1)"> {
            @HystrixProperty(name </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">circuitBreaker.enabled</span><span style="color: rgba(128, 0, 0, 1)">"</span>,value = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">"</span>),  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">是否开启断路器</span>
            @HystrixProperty(name = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">circuitBreaker.requestVolumeThreshold</span><span style="color: rgba(128, 0, 0, 1)">"</span>,value = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">10</span><span style="color: rgba(128, 0, 0, 1)">"</span>),   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">请求次数</span>
            @HystrixProperty(name = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">circuitBreaker.sleepWindowInMilliseconds</span><span style="color: rgba(128, 0, 0, 1)">"</span>,value = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">10000</span><span style="color: rgba(128, 0, 0, 1)">"</span>),  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">时间范围</span>
            @HystrixProperty(name = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">circuitBreaker.errorThresholdPercentage</span><span style="color: rgba(128, 0, 0, 1)">"</span>,value = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">60</span><span style="color: rgba(128, 0, 0, 1)">"</span>), <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">失败率达到多少后跳闸</span>
<span style="color: rgba(0, 0, 0, 1)">    })
    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> String paymentCircuitBreaker(Integer id){
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (id &lt; <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">){
            </span><span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span> RuntimeException(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">*****id 不能负数</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        }
        String serialNumber </span>=<span style="color: rgba(0, 0, 0, 1)"> IdUtil.simpleUUID();

        </span><span style="color: rgba(0, 0, 255, 1)">return</span> Thread.currentThread().getName()+<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\t</span><span style="color: rgba(128, 0, 0, 1)">"</span>+<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">调用成功,流水号：</span><span style="color: rgba(128, 0, 0, 1)">"</span>+<span style="color: rgba(0, 0, 0, 1)">serialNumber;
    }
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> String paymentCircuitBreaker_fallback(@PathVariable(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">id</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">) Integer id){
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">id 不能负数，请稍候再试,(┬＿┬)/~~     id: </span><span style="color: rgba(128, 0, 0, 1)">"</span> +<span style="color: rgba(0, 0, 0, 1)">id;
    }
}</span></pre>
</div>
<p><strong><span style="font-family: 宋体">　　controller</span></strong></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">===服务熔断</span>
@GetMapping(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/payment/circuit/{id}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 0, 255, 1)">public</span> String paymentCircuitBreaker(@PathVariable(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">id</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">) Integer id){
    String result </span>=<span style="color: rgba(0, 0, 0, 1)"> paymentCircutBreakerService.paymentCircuitBreaker(id);
    log.info(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">*******result:</span><span style="color: rgba(128, 0, 0, 1)">"</span>+<span style="color: rgba(0, 0, 0, 1)">result);
    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> result;
}</span></pre>
</div>
<p><strong><span style="font-family: 宋体">　　测试</span></strong></p>
<div class="cnblogs_code">
<pre>http:<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">localhost:8001/payment/circuit/-1  </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">多次调用报错就会开启熔断，此时再调用正确发现不会立马返回正确结果</span>
http:<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">localhost:8001/payment/circuit/1</span></pre>
</div>
<h3><span style="font-family: 宋体">2，服务熔断原理</span></h3>
<p><img src="https://img2020.cnblogs.com/blog/1405595/202010/1405595-20201010085529956-834560342.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<h4><span style="font-family: 宋体">a)熔断类型</span></h4>
<p><span style="font-family: 宋体">　　<strong>熔断打开</strong>：请求不在进行调用当前服务，内部设置始终一般为MTTR(平均故障处理时间)，当打开时长达到所设时钟则进入熔断状态。</span></p>
<p><span style="font-family: 宋体">　　<strong>熔断关闭</strong>：</span><span style="font-family: 宋体">熔断关闭不会对服务进行熔断。</span></p>
<p><span style="font-family: 宋体">　　<strong>熔断半开</strong>：</span><span style="font-family: 宋体">部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断。</span></p>
<h4><span style="font-family: 宋体">b）断路器开启条件</span></h4>
<div class="cnblogs_code">
<pre>@HystrixCommand(fallbackMethod = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">paymentCircuitBreaker_fallback</span><span style="color: rgba(128, 0, 0, 1)">"</span>,commandProperties =<span style="color: rgba(0, 0, 0, 1)"> {
      @HystrixProperty(name </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">circuitBreaker.enabled</span><span style="color: rgba(128, 0, 0, 1)">"</span>,value = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">"</span>),  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">是否开启断路器</span>
      @HystrixProperty(name = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">circuitBreaker.requestVolumeThreshold</span><span style="color: rgba(128, 0, 0, 1)">"</span>,value = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">10</span><span style="color: rgba(128, 0, 0, 1)">"</span>),   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">请求次数</span>
      @HystrixProperty(name = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">circuitBreaker.sleepWindowInMilliseconds</span><span style="color: rgba(128, 0, 0, 1)">"</span>,value = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">10000</span><span style="color: rgba(128, 0, 0, 1)">"</span>),  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">时间范围</span>
      @HystrixProperty(name = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">circuitBreaker.errorThresholdPercentage</span><span style="color: rgba(128, 0, 0, 1)">"</span>,value = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">60</span><span style="color: rgba(128, 0, 0, 1)">"</span>), <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">失败率达到多少后跳闸</span>
})</pre>
</div>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">涉及到断路器的是哪个重要参数:快照时间窗口、请求总数阈值、错误百分比阈值。
</span><span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">)<span style="color: rgba(51, 102, 255, 1)">快照时间</span>:断路器确定是否打开需要统计一些请求和错误数据，而统计的时间范围就是快照时间窗，默认为最近的10秒。
</span><span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">)<span style="color: rgba(51, 102, 255, 1)">请求总数阈值</span>:在快照时间窗内，必须满足请求总数阈值才有资格熔断。默认为20，意味着在10秒内，如果该hystrix命令的调用总次数不足20次，即使所有的请求都超时或其他原因失败，断路器都不会打开。
</span><span style="color: rgba(128, 0, 128, 1)">3</span>)<span style="color: rgba(51, 102, 255, 1)">错误百分比阈值</span>:当请求总数在快照时间窗内超过阈值，比如发生了30次调用，如果在这30次调用中，有15次发生了超时异常，也就是超过50%的错误百分比，在默认设定50%阈值情况下，这时候就会将断路器打开。</pre>
</div>
<h4><span style="font-family: 宋体">c)断路器开启后续</span></h4>
<p><span style="font-family: 宋体">　　1，再有请求调用的时候，将不会调用主逻辑，而是<span style="color: rgba(51, 102, 255, 1)">直接调用降级fallback</span>。通过断路器，实现了自动地发现错误并将降级逻辑切换为主逻辑，减少响应延迟的效果。</span></p>
<p><span style="font-family: 宋体">　　2，原来的主逻辑如何恢复：当断路器打开，对主逻辑进行熔断之后，<span style="color: rgba(51, 102, 255, 1)">hystrix会启动一个休眠时间窗</span>，在这个窗内，降级逻辑是临时的成为主逻辑；当<span style="color: rgba(51, 102, 255, 1)">休眠时间窗到期，断路器会进入半开状态</span>，释放一次请求到原来的<span style="color: rgba(51, 102, 255, 1)">主逻辑</span>上，如果此时请求<span style="color: rgba(51, 102, 255, 1)">正常</span>返回，那么<span style="color: rgba(51, 102, 255, 1)">断路器</span>将继续<span style="color: rgba(51, 102, 255, 1)">闭合</span>，主逻辑恢复，如果这次<span style="color: rgba(51, 102, 255, 1)">请求依然有问题</span>，<span style="color: rgba(51, 102, 255, 1)">断路器</span>继续进入<span style="color: rgba(51, 102, 255, 1)">打开</span>状态，休眠时间窗重新计时。</span></p>
<h4><span style="font-family: 宋体">d)各种参数</span></h4>
<p id="toc_1"><span style="font-family: 宋体"><strong>HystrixCommand:</strong></span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"><strong>commandKey</strong>：用来标识一个 Hystrix 命令，默认会取被注解的方法名。需要注意：Hystrix 里同一个键的唯一标识并不包括 groupKey，建议取一个独一二无的名字，防止多个方法之间因为键重复而互相影响。
<strong>groupKey</strong>：一组 Hystrix 命令的集合， 用来统计、报告，默认取类名，可不配置。
<strong>threadPoolKey</strong>：用来标识一个线程池，如果没设置的话会取 groupKey，很多情况下都是同一个类内的方法在共用同一个线程池，如果两个共用同一线程池的方法上配置了同样的属性，在第一个方法被执行后线程池的属性就固定了，所以属性会以第一个被执行的方法上的配置为准。
<strong>commandProperties</strong>：与此命令相关的属性。
<strong>threadPoolProperties</strong>：与线程池相关的属性，
<strong>observableExecutionMode</strong>：当 Hystrix 命令被包装成 RxJava 的 Observer 异步执行时，此配置指定了 Observable 被执行的模式，默认是 ObservableExecutionMode.EAGER，Observable 会在被创建后立刻执行，而 ObservableExecutionMode.EAGER模式下，则会产生一个 Observable 被 subscribe 后执行。我们常见的命令都是同步执行的，此配置项可以不配置。
<strong>ignoreExceptions</strong>：默认 Hystrix 在执行方法时捕获到异常时执行回退，并统计失败率以修改熔断器的状态，而被忽略的异常则会直接抛到外层，不会执行回退方法，也不会影响熔断器的状态。
<strong>raiseHystrixExceptions</strong>：当配置项包括 HystrixRuntimeException 时，所有的未被忽略的异常都会被包装成 HystrixRuntimeException，配置其他种类的异常好像并没有什么影响。
<strong>fallbackMethod</strong>：方法执行时熔断、错误、超时时会执行的回退方法，需要保持此方法与 Hystrix 方法的签名和返回值一致。
<strong>defaultFallback</strong>：默认回退方法，当配置 fallbackMethod 项时此项没有意义，另外，默认回退方法不能有参数，返回值要与 Hystrix方法的返回值相同。</span></pre>
</div>
<p id="toc_4"><strong><span style="font-family: 宋体">commandProperties:</span></strong></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"><strong><span style="color: rgba(51, 102, 255, 1)">线程隔离(Isolation)</span></strong>
execution.isolation.strategy： 配置请求隔离的方式，有 threadPool（线程池，默认）和 semaphore（信号量）两种，信号量方式高效但配置不灵活，我们一般采用 Java 里常用的线程池方式。
execution.timeout.enabled：是否给方法执行设置超时，默认为 </span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">。
execution.isolation.thread.timeoutInMilliseconds：方法执行超时时间，默认值是 </span><span style="color: rgba(128, 0, 128, 1)">1000</span><span style="color: rgba(0, 0, 0, 1)">，即 1秒，此值根据业务场景配置。
execution.isolation.thread.interruptOnTimeout： execution.isolation.thread.interruptOnCancel：是否在方法执行超时</span>/<span style="color: rgba(0, 0, 0, 1)">被取消时中断方法。需要注意在 JVM 中我们无法强制中断一个线程，如果 Hystrix 方法里没有处理中断信号的逻辑，那么中断会被忽略。
execution.isolation.semaphore.maxConcurrentRequests：默认值是 </span><span style="color: rgba(128, 0, 128, 1)">10</span>，此配置项要在 execution.isolation.strategy 配置为 semaphore 时才会生效，它指定了一个 Hystrix 方法使用信号量隔离时的最大并发数，超过此并发数的请求会被拒绝。信号量隔离的配置就这么一个，也是前文说信号量隔离配置不灵活的原因。</pre>
</div>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"><strong><span style="color: rgba(51, 102, 255, 1)">统计器(Metrics)</span></strong>
metrics.rollingStats.timeInMilliseconds：此配置项指定了窗口的大小，单位是 ms，默认值是 </span><span style="color: rgba(128, 0, 128, 1)">1000</span><span style="color: rgba(0, 0, 0, 1)">，即一个滑动窗口默认统计的是 1s 内的请求数据。
metrics.healthSnapshot.intervalInMilliseconds：它指定了健康数据统计器（影响 Hystrix 熔断）中每个桶的大小，默认是 500ms，在进行统计时，Hystrix 通过 metrics.rollingStats.timeInMilliseconds </span>/<span style="color: rgba(0, 0, 0, 1)"> metrics.healthSnapshot.intervalInMilliseconds 计算出桶数，在窗口滑动时，每滑过一个桶的时间间隔时就统计一次当前窗口内请求的失败率。
metrics.rollingStats.numBuckets：Hystrix 会将命令执行的结果类型都统计汇总到一块，给上层应用使用或生成统计图表，此配置项即指定了，生成统计数据流时滑动窗口应该拆分的桶数。此配置项最易跟上面的 metrics.healthSnapshot.intervalInMilliseconds 搞混，认为此项影响健康数据流的桶数。 此项默认是 </span><span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">，并且需要保持此值能被 metrics.rollingStats.timeInMilliseconds 整除。
metrics.rollingPercentile.enabled：是否统计方法响应时间百分比，默认为 </span><span style="color: rgba(0, 0, 255, 1)">true</span> 时，Hystrix 会统计方法执行的 <span style="color: rgba(128, 0, 128, 1)">1</span>%,<span style="color: rgba(128, 0, 128, 1)">10</span>%,<span style="color: rgba(128, 0, 128, 1)">50</span>%,<span style="color: rgba(128, 0, 128, 1)">90</span>%,<span style="color: rgba(128, 0, 128, 1)">99</span>%<span style="color: rgba(0, 0, 0, 1)"> 等比例请求的平均耗时用以生成统计图表。
metrics.rollingPercentile.timeInMilliseconds：统计响应时间百分比时的窗口大小，默认为 </span><span style="color: rgba(128, 0, 128, 1)">60000</span><span style="color: rgba(0, 0, 0, 1)">，即一分钟。
metrics.rollingPercentile.numBuckets：统计响应时间百分比时滑动窗口要划分的桶用，默认为6，需要保持能被metrics.rollingPercentile.timeInMilliseconds 整除。
metrics.rollingPercentile.bucketSize：统计响应时间百分比时，每个滑动窗口的桶内要保留的请求数，桶内的请求超出这个值后，会覆盖最前面保存的数据。默认值为 </span><span style="color: rgba(128, 0, 128, 1)">100</span>，在统计响应百分比配置全为默认的情况下，每个桶的时间长度为 10s = 60000ms / <span style="color: rgba(128, 0, 128, 1)">6</span>，但这 10s 内只保留最近的 <span style="color: rgba(128, 0, 128, 1)">100</span> 条请求的数据。</pre>
</div>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(51, 102, 255, 1)"><strong>熔断器(Circuit Breaker)</strong></span>
circuitBreaker.enabled：是否启用熔断器，默认为 </span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">;
circuitBreaker.forceOpen： circuitBreaker.forceClosed：是否强制启用</span>/<span style="color: rgba(0, 0, 0, 1)">关闭熔断器，强制启用关闭都想不到什么应用的场景，保持默认值，不配置即可。
circuitBreaker.requestVolumeThreshold：启用熔断器功能窗口时间内的最小请求数。试想如果没有这么一个限制，我们配置了 </span><span style="color: rgba(128, 0, 128, 1)">50</span>% 的请求失败会打开熔断器，窗口时间内只有 <span style="color: rgba(128, 0, 128, 1)">3</span> 条请求，恰巧两条都失败了，那么熔断器就被打开了，5s 内的请求都被快速失败。此配置项的值需要根据接口的 QPS 进行计算，值太小会有误打开熔断器的可能，值太大超出了时间窗口内的总请求数，则熔断永远也不会被触发。建议设置为 QPS * 窗口秒数 * <span style="color: rgba(128, 0, 128, 1)">60</span>%<span style="color: rgba(0, 0, 0, 1)">。
circuitBreaker.errorThresholdPercentage：在通过滑动窗口获取到当前时间段内 Hystrix 方法执行的失败率后，就需要根据此配置来判断是否要将熔断器打开了。 此配置项默认值是 </span><span style="color: rgba(128, 0, 128, 1)">50</span>，即窗口时间内超过 <span style="color: rgba(128, 0, 128, 1)">50</span>%<span style="color: rgba(0, 0, 0, 1)"> 的请求失败后会打开熔断器将后续请求快速失败。
circuitBreaker.sleepWindowInMilliseconds：熔断器打开后，所有的请求都会快速失败，但何时服务恢复正常就是下一个要面对的问题。熔断器打开时，Hystrix 会在经过一段时间后就放行一条请求，如果这条请求执行成功了，说明此时服务很可能已经恢复了正常，那么会将熔断器关闭，如果此请求执行失败，则认为服务依然不可用，熔断器继续保持打开状态。此配置项指定了熔断器打开后经过多长时间允许一次请求尝试执行，默认值是 </span><span style="color: rgba(128, 0, 128, 1)">5000</span>。</pre>
</div>
<div class="cnblogs_code">
<pre><strong><span style="color: rgba(51, 102, 255, 1)">其他(Context/</span></strong><span style="color: rgba(0, 0, 0, 1)"><strong><span style="color: rgba(51, 102, 255, 1)">Fallback)</span></strong>
requestCache.enabled：是否启用请求结果缓存。默认是 </span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">，但它并不意味着我们的每个请求都会被缓存。缓存请求结果和从缓存中获取结果都需要我们配置 cacheKey，并且在方法上使用 @CacheResult 注解声明一个缓存上下文。
requestLog.enabled：是否启用请求日志，默认为 </span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">。
fallback.enabled：是否启用方法回退，默认为 </span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)"> 即可。
fallback.isolation.semaphore.maxConcurrentRequests：回退方法执行时的最大并发数，默认是10，如果大量请求的回退方法被执行时，超出此并发数的请求会抛出 REJECTED_SEMAPHORE_FALLBACK 异常。</span></pre>
</div>
<p id="toc_10"><strong><span style="font-family: 宋体">threadPoolProperties:</span></strong></p>
<div class="cnblogs_code">
<pre>coreSize：核心线程池的大小，默认值是 <span style="color: rgba(128, 0, 128, 1)">10</span>，一般根据 QPS * <span style="color: rgba(128, 0, 128, 1)">99</span>% cost +<span style="color: rgba(0, 0, 0, 1)"> redundancy count 计算得出。
allowMaximumSizeToDivergeFromCoreSize：是否允许线程池扩展到最大线程池数量，默认为 </span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;
maximumSize：线程池中线程的最大数量，默认值是 </span><span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">，此配置项单独配置时并不会生效，需要启用 allowMaximumSizeToDivergeFromCoreSize 项。
maxQueueSize：作业队列的最大值，默认值为 </span>-<span style="color: rgba(128, 0, 128, 1)">1</span>，设置为此值时，队列会使用 SynchronousQueue，此时其 size 为0，Hystrix 不会向队列内存放作业。如果此值设置为一个正的 <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> 型，队列会使用一个固定 size 的 LinkedBlockingQueue，此时在核心线程池内的线程都在忙碌时，会将作业暂时存放在此队列内，但超出此队列的请求依然会被拒绝。
queueSizeRejectionThreshold：由于 maxQueueSize 值在线程池被创建后就固定了大小，如果需要动态修改队列长度的话可以设置此值，即使队列未满，队列内作业达到此值时同样会拒绝请求。此值默认是 </span><span style="color: rgba(128, 0, 128, 1)">5</span><span style="color: rgba(0, 0, 0, 1)">，所以有时候只设置了 maxQueueSize 也不会起作用。
keepAliveTimeMinutes：由上面的 maximumSize，我们知道，线程池内核心线程数目都在忙碌，再有新的请求到达时，线程池容量可以被扩充为到最大数量，等到线程池空闲后，多于核心数量的线程还会被回收，此值指定了线程被回收前的存活时间，默认为 </span><span style="color: rgba(128, 0, 128, 1)">2</span>，即两分钟。</pre>
</div>
<h2><span style="font-family: 宋体">四、Hystrix dashboard</span></h2>
<p><span style="font-family: 宋体">源码:<a href="https://gitee.com/xiaocheng0902/my-cloud/tree/master/cloud-hystrix/cloud-consumer-hystrix-dashboard9001" target="_blank">cloud-consumer-hystrix-dashboard9001</a></span></p>
<h3><span style="font-family: 宋体">1，yaml文件</span></h3>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">#指定端口号即可
server:
  port: </span><span style="color: rgba(128, 0, 128, 1)">9001</span></pre>
</div>
<h3><span style="font-family: 宋体">2，application启动类</span></h3>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">@SpringBootApplication
@EnableHystrixDashboard
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> HystrixDashboardMain9001 {
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> main(String[] args) {
        SpringApplication.run(HystrixDashboardMain9001.</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)">,args);
    }
}</span></pre>
</div>
<h3><span style="font-family: 宋体">3，被监控类(provider服务)</span></h3>
<p><span style="font-family: 宋体">pom文件</span></p>
<div class="cnblogs_code">
<pre> &lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;
&lt;/dependency&gt;</pre>
</div>
<p><span style="font-family: 宋体">application启动类中添加</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">SpringCloud升级方便使用hystrix的dashboard监控</span>
<span style="color: rgba(0, 0, 0, 1)">@Bean
</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> ServletRegistrationBean getServlet(){
    HystrixMetricsStreamServlet streamServlet </span>= <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> HystrixMetricsStreamServlet();
    ServletRegistrationBean registrationBean </span>= <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ServletRegistrationBean(streamServlet);
    registrationBean.setLoadOnStartup(</span><span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">);
    registrationBean.addUrlMappings(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/hystrix.stream</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    registrationBean.setName(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">HystrixMetricsStreamServlet</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> registrationBean;
}</span></pre>
</div>
<h3><span style="font-family: 宋体">4，启动并使用</span></h3>
<p><span style="font-family: 宋体">访问地址:<a href="http://localhost:9001/hystrix">http://localhost:9001/hystrix</a></span></p>
<p>&nbsp; &nbsp;&nbsp;<img src="https://img2020.cnblogs.com/blog/1405595/202010/1405595-20201011194120430-2015720935.png" width="771" height="256" loading="lazy"></p>
<p>&nbsp;</p>
<p><span style="font-family: 宋体">&nbsp;应用说明</span></p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<img src="https://img2020.cnblogs.com/blog/1405595/202010/1405595-20201011205847070-1330162142.png" width="752" height="339" loading="lazy"></p>
<p>&nbsp;</p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
		</div>
		<div class="postDesc">posted @ 
<span id="post-date">2020-10-11 21:03</span>&nbsp;
<a href="https://www.cnblogs.com/bbgs-xc/">MXC肖某某</a>&nbsp;
阅读(<span id="post_view_count">19</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13740464" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(13740464);return false;">收藏</a></div>
	</div>
	
	
</div><!--end: topics 文章、评论容器-->
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 433655, cb_blogApp = 'bbgs-xc', cb_blogUserGuid = '142b21a2-5a20-4604-3ff5-08d5bd671cf8';
    var cb_entryId = 13740464, cb_entryCreatedDate = '2020-10-11 21:03', cb_postType = 1;
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id='div-gpt-ad-1592366332455-0' style='width: 468px; height: 60px;'></div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverT2();
        deliverC1C2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div></div>


	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="calendar"><div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script></div>
			
			<DIV id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</DIV>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 MXC肖某某
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    <div id="page_end_html">
        <script language="javascript" type="text/javascript">

// 生成目录索引列表
// ref: http://www.cnblogs.com/wangqiguo/p/4355032.html
// modified by: zzq
function GenerateContentList()
{
    var mainContent = $('#cnblogs_post_body');
    var h2_list = $('#cnblogs_post_body h2');//如果你的章节标题不是h2,只需要将这里的h2换掉即可

    if(mainContent.length < 1)
        return;

    if(h2_list.length>0)
    {
        var content = '<a name="_labelTop"></a>';
        content += '<div id="navCategory">';
        content += '<p style="font-size:18px"><b>目录</b></p>';
        content += '<ul>';
        for(var i=0; i<h2_list.length; i++)
        {
            var go_to_top = '<div style="text-align: right"><a href="#_labelTop">回到顶部</a><a name="_label' + i + '"></a></div>';
            $(h2_list[i]).before(go_to_top);

            var h3_list = $(h2_list[i]).nextAll("h3");
            var li3_content = '';
            for(var j=0; j<h3_list.length; j++)
            {
                var tmp = $(h3_list[j]).prevAll('h2').first();
                if(!tmp.is(h2_list[i]))
                    break;
                var li3_anchor = '<a name="_label' + i + '_' + j + '"></a>';
                $(h3_list[j]).before(li3_anchor);
                li3_content += '<li><a href="#_label' + i + '_' + j + '">' + $(h3_list[j]).text() + '</a></li>';
            }

            var li2_content = '';
            if(li3_content.length > 0)
                li2_content = '<li><a href="#_label' + i + '">' + $(h2_list[i]).text() + '</a><ul>' + li3_content + '</ul></li>';
            else
                li2_content = '<li><a href="#_label' + i + '">' + $(h2_list[i]).text() + '</a></li>';
            content += li2_content;
        }
        content += '</ul>';
        content += '</div><p> </p>';
        content += '<p style="font-size:18px"><b>正文</b></p>';
        if($('#cnblogs_post_body').length != 0 )
        {
            $($('#cnblogs_post_body')[0]).prepend(content);
        }
    }

}

GenerateContentList();
</script>
    </div>
</body>
</html>
