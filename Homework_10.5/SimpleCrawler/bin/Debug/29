<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta name="description" content="最近打算把Java网络编程相关的知识深入一下（IO、NIO、Socket编程、Netty) Java网络编程主要涉及到对Socket和ServerSocket的使用上 阅读之前最好有TCP和UDP协议" />
    <meta property="og:description" content="最近打算把Java网络编程相关的知识深入一下（IO、NIO、Socket编程、Netty) Java网络编程主要涉及到对Socket和ServerSocket的使用上 阅读之前最好有TCP和UDP协议" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Java 网络编程 - 油多坏不了菜 - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=kXxbcm7tkkASG2_xwyD6Kw4CzHe0bT3mi0jyCb8YspQ" />
    <link id="MainCss" rel="stylesheet" href="/skins/simpleblue/bundle-simpleblue.min.css?v=Bz6eufLWGVsWJjKcjfFVp12zhnPfKDi7i7Z6x00pOIo" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/simpleblue/bundle-simpleblue-mobile.min.css?v=xbzzau3Jqgjmy0hPlKp75vATFEb2H-hCGf6MOx4l_3g" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/pepper-0611/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/pepper-0611/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/pepper-0611/wlwmanifest.xml" />
    <script>
        var currentBlogId = 629008;
        var currentBlogApp = 'pepper-0611';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'SimpleBlue';
        var visitorUserId = '';
    </script>
        <script>
            var currentPostDateAdded = '2020-10-04 03:26';
        </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=fLUEwRea4WeqlJe_CLnNunLQZl_ViJFLgKpcNDuKptI"></script>
    
    
    
</head>
<body>
    <a name="top"></a>
    <div id="top_nav" class="navbar">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding">
                    <a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a>
                </li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=oS4PkibyMjZ9rGD5XAcLt99uW_s76Javy2up4dbnZNY" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" onclick="logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signin/?returnUrl=https://www.cnblogs.com/">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    
    <div id="home">
    <div id="header">
        <div id="blogTitle">
            
<div class="title"><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/pepper-0611/">油多坏不了菜</a>
</div>
<div class="subtitle">

</div>

        </div>
        <div id="navigator">
            
<ul id="navList">
    <li id="nav_sitehome"><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
    <li id="nav_myhome">
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/pepper-0611/">
首页</a>
</li>
    <li id="nav_newpost">

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
    <li id="nav_contact">
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E6%B2%B9%E5%A4%9A%E5%9D%8F%E4%B8%8D%E4%BA%86%E8%8F%9C">
联系</a></li>
    <li id="nav_rss">
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/pepper-0611/rss/">
订阅</a></li>
    <li id="nav_admin">
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>

            <div class="blogStats">
                
<span id="stats_post_count">随笔 - 
5&nbsp;</span>
<span id="stats_article_count">文章 - 
0&nbsp;</span>
<!-- <span id="stats-comment_count"></span> -->
<span id="stats_comment_count">评论 - 
0</span>
            </div>
        </div>
    </div>
    <div id="main">
        <div id="mainContent">
            <div class="forFlow">
                <div id="post_detail">
    <div id="topics">
        <div class="post">
            <h1 class="postTitle">
                
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/pepper-0611/p/13767359.html">
    <span>Java 网络编程</span>
    


</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <p>最近打算把Java网络编程相关的知识深入一下（IO、NIO、Socket编程、Netty)</p>
<p>Java网络编程主要涉及到对Socket和ServerSocket的使用上</p>
<p>阅读之前最好有TCP和UDP协议的理论知识以及Java I/O流的基础知识</p>
<p><a href="https://www.cnblogs.com/pepper-0611/p/13735018.html">Java I/O流</a></p>
<h1 id="tcp协议之上构建网络程序">TCP协议之上构建网络程序</h1>
<h2 id="tcp协议的特点">TCP协议的特点</h2>
<ul>
<li>
<p>TCP是面向连接的协议，通信之前需要先建立连接</p>
</li>
<li>
<p>提供可靠传输，通过TCP传输的数据无差错、不丢失、不重复、并且按序到达</p>
</li>
<li>
<p>面向字节流（<em><strong>虽然应用程序和TCP的交互是一次一个数据块，但是TCP把应用程序交下来的数据仅仅看成是一连串的无结构的字节流</strong></em>）</p>
</li>
<li>
<p>点对点全双工通信</p>
</li>
<li>
<p>拥塞控制 &amp; 滑动窗口</p>
</li>
</ul>
<p>我们使用Java构建基于TCP的网络程序时主要关心客户端Socket和服务端ServerSocket两个类</p>
<h2 id="客户端socket">客户端SOCKET</h2>
<p>使用客户端SOCKET的生命周期：连接远程服务器 --&gt; 发送数据、接受数据... --&gt; 关闭连接</p>
<h3 id="连接远程服务器">连接远程服务器</h3>
<h4 id="通过构造函数连接">通过构造函数连接</h4>
<p>构造函数里指定远程主机和端口, 构造函数正常返回即代表连接成功， 连接失败会抛IOException或者UnkonwnHostException</p>
<pre><code class="language-java">public Socket(String host, int port)
public Socket(String host, int port, InetAddress localAddr,int localPort)
</code></pre>
<h4 id="手动连接">手动连接</h4>
<p>当使用无参构造函数时，通信前需要手动调用connect进行连接（同时可设置SOCKET选项）</p>
<pre><code class="language-java">Socket so = new Socket();
SocketAddress address = new InetSocketAddress("www.baidu.com", 80);
so.connect(address);
</code></pre>
<h3 id="发送数据、接受数据">发送数据、接受数据</h3>
<p>Java的I/O建立于流之上，读数据用输入流，写数据用输出流</p>
<p>下段代码连接本地7001端口的服务端程序，读取一行数据并且将该行数据回写服务端。</p>
<pre><code class="language-java"> try (Socket so = new Socket("127.0.0.1", 7001)) {
     BufferedReader reader = new BufferedReader(new InputStreamReader(so.getInputStream()));
     BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(so.getOutputStream()));
     //read message from server
     String recvMsg = reader.readLine();
     //write back to sever.
     writer.write(recvMsg);
     writer.newLine();
     writer.flush();
  } catch (IOException e) {
     //ignore
  }
</code></pre>
<h3 id="大端模式">大端模式</h3>
<p>大端模式是指数据的高字节保存在内存的低地址中（默认或者说我们阅读习惯都是大端模式）</p>
<h3 id="关闭连接">关闭连接</h3>
<p>Socket对象使用之后必须关闭，以释放底层系统资源</p>
<h4 id="finally-块中关闭连接">finally 块中关闭连接</h4>
<pre><code class="language-java">Socket so = null;
try {
  so = new Socket("127.0.0.1", 7001);
  //
}catch (Exception e){
	//
}finally {
  if(so != null){
    try {
      so.close();
    } catch (IOException e) {
      //
    }
  }
}
</code></pre>
<h4 id="try-with-resource-语法自动关闭连接">Try with resource 语法自动关闭连接</h4>
<p>在try块中定义的Socket对象(以及其他实现了AutoCloseable的对象)Java会自动关闭</p>
<pre><code class="language-java">//在try中定义的Socket对象(或其他实现了AutoCloseable的对象)Java会自动关闭
try (Socket so = new Socket("127.0.0.1", 7001)) {
		//do something
} catch(Exception e){
		//
}
</code></pre>
<h2 id="服务端serversocket">服务端ServerSocket</h2>
<p>使用ServerSocket的生命周期：绑定本地端口(服务启动) --&gt; 监听客户端连接 --&gt; 接受客户端连接  --&gt; 通过该客户端连接与客户端进行通信 --&gt; 监听客户端连接 --&gt; .....(loop) --&gt; 关闭服务器</p>
<h3 id="绑定本地端口">绑定本地端口</h3>
<p>直接在构造函数中指定端口完成绑定或者手工绑定</p>
<pre><code class="language-java">//构造函数中指定端口完成绑定
ServerSokect ss = new  ServerSocket(7001);

//手工调用bind函数完成绑定
ServerSokect ss = new  ServerSocket();
ss.bind(new InetSocketAddress(7001));
</code></pre>
<h3 id="接受客户端连接">接受客户端连接</h3>
<p>accept方法返回一个Socket对象，代表与客户端建立的一个连接</p>
<pre><code class="language-java"> ServerSokect ss = new ServerSocket(7001);  
 while(true){
    //阻塞等待连接建立
 		Socket so = ss.accept();
    // do something.
 }
</code></pre>
<h3 id="与客户端进行通信">与客户端进行通信</h3>
<p>通过连接建立后的Socket对象，打开输入流、输出流即可与客户端进行通信</p>
<h3 id="关闭服务器">关闭服务器</h3>
<p>同客户端Socket关闭一个道理</p>
<h3 id="demo">Demo</h3>
<p>下段代码服务器在连接建立时发送一行数据到客户端， 然后再读取一行客户端返回的数据，并比较这两行数据是否一样。</p>
<p>**主线程只接受客户端连接，连接建立后与客户端的通信在一个线程池中完成 **</p>
<pre><code class="language-java">public class BaseServer {

    private static final String MESSAGE = "hello, i am server";
    private static ExecutorService threads = Executors.newFixedThreadPool(6);

    public static void main(String[] args) {
       //try with resource 写法绑定本地端口
        try (ServerSocket socket = new ServerSocket(7001)) {
            while (true) {
              	//接受客户端连接
                Socket so = socket.accept();
              	//与客户端通信的工作放到线程池中异步执行
                threads.submit(() -&gt; handle(so));
            }
        } catch (IOException e) {
            //
        }
    }

    public static void handle(Socket so) {
       //try with resource 写法打开输入输出流
        try (InputStream in = so.getInputStream(); OutputStream out = so.getOutputStream()) {
            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out, "utf-8"));
            BufferedReader reader = new BufferedReader(new InputStreamReader(in));

            //send data to client.
            writer.write(MESSAGE);
            writer.newLine();
            writer.flush();

            //recv data from client.
            String clientResp = reader.readLine();
            System.out.println(MESSAGE.equals(clientResp));
        } catch (Exception e) {
            //ignore
        }finally {
          //关闭socket
            if(so != null){
                try {
                    so.close();
                } catch (IOException e) {
                    //
                }
            }
        }
    }
}
</code></pre>
<h2 id="socket选项">Socket选项</h2>
<h3 id="tcp_nodelay">TCP_NODELAY</h3>
<p>默认tcp缓冲是打开的，小数据包在发送之前会组合成更大的数据包发送， 在发送另一个包之前，本地主机需要等待对前一个包的确认-- Nagle算法</p>
<p>但是这种缓冲模式有可能导致某些应用程序响应太慢（比如一个简单的打字程序）</p>
<p>tcp_nodelay 设置为true关闭tcp缓冲, 所有的包一就绪就会发送</p>
<pre><code class="language-java"> public void setTcpNoDelay(boolean on) 
</code></pre>
<h3 id="so_lingerlinger是缓慢消失、徘徊的意思">SO_LINGER(linger是缓慢消失、徘徊的意思)</h3>
<p>so_linger选项指定socket关闭时如何处理尚未发送的数据报，默认是close()方法立即返回，但是系统仍会将数据的数据发送</p>
<p>Linger 设置为0时，socket关闭时会丢弃所有未发送的数据</p>
<p>如果so_linger 打开且linger为正数，close()会阻塞指定的秒数，等待发送数据和接受确认，直到指定的秒数过去。</p>
<pre><code class="language-java">public void setSoLinger(boolean on, int linger)
</code></pre>
<h3 id="so_timeout">SO_TIMEOUT</h3>
<p>默认情况，尝试从socket读取数据时，read()会阻塞尽可能长的时间来获得足够多的字节</p>
<p>so_timeout 用于设置这个阻塞的时间，当时间到期抛出一个InterruptedException异常。</p>
<pre><code class="language-java">public synchronized void setSoTimeout(int timeout)//毫秒，默认为0一直阻塞
</code></pre>
<h3 id="so_keeplive">SO_KEEPLIVE</h3>
<p>so_keeplive打开后，客户端每隔一段时间就发送一个报文到服务端已确保与服务端的连接还正常（TCP层面提供的心跳机制）</p>
<pre><code class="language-java">public void setKeepAlive(boolean on)
</code></pre>
<h3 id="so_rcvbuf-和so_sndbuf">SO_RCVBUF 和SO_SNDBUF</h3>
<p>设置tcp接受和发送缓冲区大小(内核层面的缓冲区大小)</p>
<p>对于传输大的数据块时（HTTP、FTP)，可以从大缓冲区中受益；对于交互式会话的小数据量传输（Telnet和很多游戏），大缓冲区没啥帮助</p>
<p>缓冲区最大大小 = 带宽 * 时延 （如果带宽为2Mb/s, 时延为500ms, 则缓冲区最大大小为128KB左右)</p>
<p>如果应用程序不能充分利用带宽，可以适当增加缓冲区大小，如果存在丢包和拥塞现象，则要减小缓冲区大小</p>
<h1 id="udp协议之上构建网络程序">UDP协议之上构建网络程序</h1>
<h2 id="udp协议的特点">UDP协议的特点</h2>
<ul>
<li>
<p>无连接。发送数据之前不需要建立连接，省去了建立连接的开销</p>
</li>
<li>
<p>尽力最大努力交付。数据报可能丢失、乱序到达</p>
</li>
<li>
<p>面向报文（<strong>UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界</strong>）</p>
</li>
<li>
<p>UDP没有拥塞控制</p>
</li>
<li>
<p>UDP支持一对一、一对多、多对一和多对多的交互通信</p>
</li>
<li>
<p>UDP的首部开销小，只有8个字节，比TCP的20个字节的首部还要短。</p>
<p>构建UDP协议的网络程序时， 我们关系DatagramSocket和DatagramPacket两个类</p>
</li>
</ul>
<h2 id="数据报">数据报</h2>
<p>UDP是面向报文传输的，对应用层交下来的报文不合并也不拆分（TCP就存在拆包和粘包的问题）</p>
<p>数据报关心两个事：存储报文的底层字节数组 和 通信对端地址（对端主机和端口）</p>
<pre><code class="language-java">//发送数据报指定发送的数据和对端地址
DatagramPacket sendPacket = new DatagramPacket(new byte[0], 0, InetAddress.getByName("127.0.0.1"), 7002);

//接受数据报只需要指定底层字节数组以及其大小
DatagramPacket recvPacket = new DatagramPacket(new byte[1024], 1024);
</code></pre>
<h2 id="udp客户端">UDP客户端</h2>
<p>因为UDP是无连接的，所以构造DatagramSocket的时候只需要指定本地端口， 不需要指定远程主机和端口</p>
<p>远程主机的主机和端口是指定在数据报中的，所以UDP可以实现一对一、一对多、多对多传输</p>
<pre><code class="language-java"> try (DatagramSocket so = new DatagramSocket(0)) {
   //数据报中指定对端地址（服务端地址）
   DatagramPacket sendPacket = new DatagramPacket(new byte[0], 0,
                                                  InetAddress.getByName("127.0.0.1"), 7002);
   //发送数据报
   so.send(sendPacket);

   //阻塞接受数据报
   DatagramPacket recvPacket = new DatagramPacket(new byte[1024], 1024);
   so.receive(recvPacket);
   //打印对端返回的数据
   System.out.println(new String(recvPacket.getData(), 0, recvPacket.getLength()));
 } catch (Exception e) {
   e.printStackTrace();
 }
</code></pre>
<h2 id="udp服务端">UDP服务端</h2>
<p>UDP服务端同客户端一样使用的是DatagramSocket， 区别在于绑带的本地端口需要显示申明</p>
<p>下面的UDP服务端程序接受客户端的报文，从报文中获取请求主机和端口，然后返回固定的数据内容 "received"</p>
<pre><code class="language-java">byte[] data = "received".getBytes();
try (DatagramSocket so = new DatagramSocket(7002)) {
  while (true) {
    try {
      DatagramPacket recvPacket = new DatagramPacket(new byte[1024], 1024);
      so.receive(recvPacket);
      DatagramPacket sendPacket = new DatagramPacket(data, data.length,
                                                     recvPacket.getAddress(), recvPacket.getPort());
      so.send(sendPacket);
    } catch (Exception e) {
      //
    }
  }

} catch (SocketException e) {
  //
}
</code></pre>
<h2 id="连接">连接</h2>
<p>UDP是无连接的， 但是DatagramSocket提供了连接功能对通信对端进行限制（并不是真的连接）</p>
<p>连接之后只能向指定的主机和端口发送数据报， 否则会抛出异常。</p>
<p>连接之后只能接收到指定主机和端口发送的数据报， 其他数据报会被直接抛弃。</p>
<pre><code class="language-java"> public void connect(InetAddress address, int port)
 public void disconnect() 
</code></pre>
<h1 id="总结">总结</h1>
<p>Java 中TCP编程依赖于 Socket和ServerSocket，UDP编程依赖于DatagramSocket和DatagramPacket</p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-10-04 15:26</span>&nbsp;
<a href="https://www.cnblogs.com/pepper-0611/">油多坏不了菜</a>&nbsp;
阅读(<span id="post_view_count">136</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13767359" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(13767359);return false;">收藏</a></div>
        </div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 629008, cb_blogApp = 'pepper-0611', cb_blogUserGuid = '316d49b4-3808-4ab5-2d12-08d850c2b691';
    var cb_entryId = 13767359, cb_entryCreatedDate = '2020-10-04 15:26', cb_postType = 1;
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id='div-gpt-ad-1592366332455-0' style='width: 468px; height: 60px;'></div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverT2();
        deliverC1C2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>    </div>
</div>
            </div>
        </div>

        <div id="sideBar">
            <div id="sideBarMain">
                
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
                <div id="calendar"><div id="blog-calendar" style="display:none"></div></div>                
                <script>loadBlogDefaultCalendar();</script>
                <div id="leftcontentcontainer">
                    <!-- begin:SingleColumn -->
                    <div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
                    <!-- end:  SingleColumn -->
                </div>
            </div>
        </div>
        <div class="clear"></div>
    </div>
    <div class="clear"></div>
    <div id="footer">
        <!--done-->
Copyright &copy; 2020 油多坏不了菜
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>

    </div>
</div>

    
</body>
</html>
